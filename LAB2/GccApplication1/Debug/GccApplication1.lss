
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  0000038a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001828  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001550  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058a  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a23  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002be  00000000  00000000  0000434f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000460d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c1       	rjmp	.+546    	; 0x2b4 <__vector_36>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ea e8       	ldi	r30, 0x8A	; 138
 14c:	f3 e0       	ldi	r31, 0x03	; 3
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a4 37       	cpi	r26, 0x74	; 116
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	02 d0       	rcall	.+4      	; 0x164 <main>
 160:	12 c1       	rjmp	.+548    	; 0x386 <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <main>:
#define BAUDRATE 38400


int main(void)
{	
	DDRB |= (1 << DDB5) | (1 << DDB6);  
 164:	84 b1       	in	r24, 0x04	; 4
 166:	80 66       	ori	r24, 0x60	; 96
 168:	84 b9       	out	0x04, r24	; 4
    DDRE |= (1 << DDE3);  
 16a:	8d b1       	in	r24, 0x0d	; 13
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	8d b9       	out	0x0d, r24	; 13
	
	LED1OFF;
 170:	85 b1       	in	r24, 0x05	; 5
 172:	80 62       	ori	r24, 0x20	; 32
 174:	85 b9       	out	0x05, r24	; 5
	LED2OFF;
 176:	85 b1       	in	r24, 0x05	; 5
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	85 b9       	out	0x05, r24	; 5
	LED3OFF;
 17c:	8e b1       	in	r24, 0x0e	; 14
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	84 e3       	ldi	r24, 0x34	; 52
 186:	9c e0       	ldi	r25, 0x0C	; 12
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x24>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x2e>
 192:	00 00       	nop
	_delay_ms(500);
	LED1ON;
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	85 b9       	out	0x05, r24	; 5
	LED2ON;
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8f 7b       	andi	r24, 0xBF	; 191
 19e:	85 b9       	out	0x05, r24	; 5
	LED3ON;
 1a0:	8e b1       	in	r24, 0x0e	; 14
 1a2:	87 7f       	andi	r24, 0xF7	; 247
 1a4:	8e b9       	out	0x0e, r24	; 14
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	9c e0       	ldi	r25, 0x0C	; 12
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x48>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x52>
 1b6:	00 00       	nop
	_delay_ms(500);
	LED1OFF;
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	85 b9       	out	0x05, r24	; 5
	LED2OFF;
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	85 b9       	out	0x05, r24	; 5
	LED3OFF;
 1c4:	8e b1       	in	r24, 0x0e	; 14
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	8e b9       	out	0x0e, r24	; 14
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	84 e3       	ldi	r24, 0x34	; 52
 1ce:	9c e0       	ldi	r25, 0x0C	; 12
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x6c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x76>
 1da:	00 00       	nop
	_delay_ms(500);
	
	
	
	int j = 0;
	UART_Initialization(BAUDRATE);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	96 e9       	ldi	r25, 0x96	; 150
 1e0:	2a d0       	rcall	.+84     	; 0x236 <UART_Initialization>
	UART_SendString("Stlac klavesu: ");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	92 e0       	ldi	r25, 0x02	; 2
	while(1)
	{	
		uint8_t receivedCharacter = UART_ReceiveCharacter();
 1e6:	40 d0       	rcall	.+128    	; 0x268 <UART_SendString>
 1e8:	5e d0       	rcall	.+188    	; 0x2a6 <UART_ReceiveCharacter>
		if (receivedCharacter == 49) {
 1ea:	81 33       	cpi	r24, 0x31	; 49
			UART_SendString("Ahoj stlacil si 1\r\n");
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <main+0x92>
 1ee:	80 e1       	ldi	r24, 0x10	; 16
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	3a d0       	rcall	.+116    	; 0x268 <UART_SendString>
 1f4:	f9 cf       	rjmp	.-14     	; 0x1e8 <main+0x84>
				
		} else if (receivedCharacter == 50) {
 1f6:	82 33       	cpi	r24, 0x32	; 50
			UART_SendString("Ahoj stlacil si 2\r\n");
 1f8:	21 f4       	brne	.+8      	; 0x202 <main+0x9e>
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	34 d0       	rcall	.+104    	; 0x268 <UART_SendString>
 200:	f3 cf       	rjmp	.-26     	; 0x1e8 <main+0x84>
			
		} else if (receivedCharacter == 51) {
 202:	83 33       	cpi	r24, 0x33	; 51
 204:	41 f4       	brne	.+16     	; 0x216 <main+0xb2>
			LED1CHANGE;
 206:	95 b1       	in	r25, 0x05	; 5
 208:	80 e2       	ldi	r24, 0x20	; 32
 20a:	89 27       	eor	r24, r25
			UART_SendString("Zmenil si LED 1\r\n");
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	88 e3       	ldi	r24, 0x38	; 56
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	2a d0       	rcall	.+84     	; 0x268 <UART_SendString>
 214:	e9 cf       	rjmp	.-46     	; 0x1e8 <main+0x84>
			
		} else if (receivedCharacter == 52) {
 216:	84 33       	cpi	r24, 0x34	; 52
 218:	41 f4       	brne	.+16     	; 0x22a <main+0xc6>
			LED3CHANGE;
 21a:	9e b1       	in	r25, 0x0e	; 14
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	89 27       	eor	r24, r25
			UART_SendString("Zmenil si LED 3\r\n");
 220:	8e b9       	out	0x0e, r24	; 14
 222:	8a e4       	ldi	r24, 0x4A	; 74
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	20 d0       	rcall	.+64     	; 0x268 <UART_SendString>
			
		} else if (receivedCharacter !=0) {
 228:	df cf       	rjmp	.-66     	; 0x1e8 <main+0x84>
 22a:	88 23       	and	r24, r24
			UART_SendString("nedefinovane tlacidlo\r\n");
 22c:	e9 f2       	breq	.-70     	; 0x1e8 <main+0x84>
 22e:	8c e5       	ldi	r24, 0x5C	; 92
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	1a d0       	rcall	.+52     	; 0x268 <UART_SendString>
 234:	d9 cf       	rjmp	.-78     	; 0x1e8 <main+0x84>

00000236 <UART_Initialization>:
#include <avr/interrupt.h>
#define F_CPU 8000000 

void UART_Initialization(uint16_t br)
{
	int ubbr = ((F_CPU/16/br)-1);
 236:	9c 01       	movw	r18, r24
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	60 e2       	ldi	r22, 0x20	; 32
 23e:	71 ea       	ldi	r23, 0xA1	; 161
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	62 d0       	rcall	.+196    	; 0x30a <__divmodsi4>
 246:	21 50       	subi	r18, 0x01	; 1
 248:	31 09       	sbc	r19, r1
	UBRR1H = (uint8_t)(ubbr>>8);
 24a:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UBRR1L = (uint8_t)ubbr;
 24e:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	
	UCSR1B = (1<<RXCIE1)|(1<<TXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 252:	88 ed       	ldi	r24, 0xD8	; 216
 254:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 258:	08 95       	ret

0000025a <UART_SendCharacter>:
}


void UART_SendCharacter(uint8_t data)
{
	while ( !( UCSR1A & (1<<UDRE1)) );
 25a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 25e:	95 ff       	sbrs	r25, 5
 260:	fc cf       	rjmp	.-8      	; 0x25a <UART_SendCharacter>
	UDR1 = data;
 262:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 266:	08 95       	ret

00000268 <UART_SendString>:
}

void UART_SendString(char*text) {
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	8c 01       	movw	r16, r24
	
	for (int i=0; i < strlen(text); i++) {
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	d0 e0       	ldi	r29, 0x00	; 0
 276:	08 c0       	rjmp	.+16     	; 0x288 <UART_SendString+0x20>
		if (text[i] == 0x00) {
 278:	f8 01       	movw	r30, r16
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	61 f0       	breq	.+24     	; 0x29c <UART_SendString+0x34>
			return;
		}
		UART_SendCharacter(text[i]);
 284:	ea df       	rcall	.-44     	; 0x25a <UART_SendCharacter>
	UDR1 = data;
}

void UART_SendString(char*text) {
	
	for (int i=0; i < strlen(text); i++) {
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	f8 01       	movw	r30, r16
 28a:	01 90       	ld	r0, Z+
 28c:	00 20       	and	r0, r0
 28e:	e9 f7       	brne	.-6      	; 0x28a <UART_SendString+0x22>
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	e0 1b       	sub	r30, r16
 294:	f1 0b       	sbc	r31, r17
 296:	ce 17       	cp	r28, r30
 298:	df 07       	cpc	r29, r31
 29a:	70 f3       	brcs	.-36     	; 0x278 <UART_SendString+0x10>
		if (text[i] == 0x00) {
			return;
		}
		UART_SendCharacter(text[i]);
	}
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <UART_ReceiveCharacter>:

uint8_t UART_ReceiveCharacter( void )
{
	while ( !(UCSR1A & (1<<RXC1)) );
 2a6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 2aa:	88 23       	and	r24, r24
 2ac:	e4 f7       	brge	.-8      	; 0x2a6 <UART_ReceiveCharacter>
	return UDR1;
 2ae:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
}
 2b2:	08 95       	ret

000002b4 <__vector_36>:

ISR(USART1_RX_vect) {
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	0b b6       	in	r0, 0x3b	; 59
 2c0:	0f 92       	push	r0
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
	uint8_t recv;
	recv = UART_ReceiveCharacter();
 2da:	e5 df       	rcall	.-54     	; 0x2a6 <UART_ReceiveCharacter>
	if (recv == 1) {
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	11 f4       	brne	.+4      	; 0x2e4 <__vector_36+0x30>
		UART_SendCharacter('1');
 2e0:	81 e3       	ldi	r24, 0x31	; 49
 2e2:	bb df       	rcall	.-138    	; 0x25a <UART_SendCharacter>
	}
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0b be       	out	0x3b, r0	; 59
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__divmodsi4>:
 30a:	05 2e       	mov	r0, r21
 30c:	97 fb       	bst	r25, 7
 30e:	16 f4       	brtc	.+4      	; 0x314 <__divmodsi4+0xa>
 310:	00 94       	com	r0
 312:	0f d0       	rcall	.+30     	; 0x332 <__negsi2>
 314:	57 fd       	sbrc	r21, 7
 316:	05 d0       	rcall	.+10     	; 0x322 <__divmodsi4_neg2>
 318:	14 d0       	rcall	.+40     	; 0x342 <__udivmodsi4>
 31a:	07 fc       	sbrc	r0, 7
 31c:	02 d0       	rcall	.+4      	; 0x322 <__divmodsi4_neg2>
 31e:	46 f4       	brtc	.+16     	; 0x330 <__divmodsi4_exit>
 320:	08 c0       	rjmp	.+16     	; 0x332 <__negsi2>

00000322 <__divmodsi4_neg2>:
 322:	50 95       	com	r21
 324:	40 95       	com	r20
 326:	30 95       	com	r19
 328:	21 95       	neg	r18
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
 32c:	4f 4f       	sbci	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255

00000330 <__divmodsi4_exit>:
 330:	08 95       	ret

00000332 <__negsi2>:
 332:	90 95       	com	r25
 334:	80 95       	com	r24
 336:	70 95       	com	r23
 338:	61 95       	neg	r22
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	8f 4f       	sbci	r24, 0xFF	; 255
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	08 95       	ret

00000342 <__udivmodsi4>:
 342:	a1 e2       	ldi	r26, 0x21	; 33
 344:	1a 2e       	mov	r1, r26
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	fd 01       	movw	r30, r26
 34c:	0d c0       	rjmp	.+26     	; 0x368 <__udivmodsi4_ep>

0000034e <__udivmodsi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	ee 1f       	adc	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	a2 17       	cp	r26, r18
 358:	b3 07       	cpc	r27, r19
 35a:	e4 07       	cpc	r30, r20
 35c:	f5 07       	cpc	r31, r21
 35e:	20 f0       	brcs	.+8      	; 0x368 <__udivmodsi4_ep>
 360:	a2 1b       	sub	r26, r18
 362:	b3 0b       	sbc	r27, r19
 364:	e4 0b       	sbc	r30, r20
 366:	f5 0b       	sbc	r31, r21

00000368 <__udivmodsi4_ep>:
 368:	66 1f       	adc	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	1a 94       	dec	r1
 372:	69 f7       	brne	.-38     	; 0x34e <__udivmodsi4_loop>
 374:	60 95       	com	r22
 376:	70 95       	com	r23
 378:	80 95       	com	r24
 37a:	90 95       	com	r25
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	bd 01       	movw	r22, r26
 382:	cf 01       	movw	r24, r30
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
