
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000033d6  0000346a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000180b  00800204  00800204  0000346e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000346e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005474  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002760  00000000  00000000  00008de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b95  00000000  00000000  0000b544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ec0  00000000  00000000  0000e0dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ec9  00000000  00000000  0000ef9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d90  00000000  00000000  00010e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  00012bf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	7e c2       	rjmp	.+1276   	; 0x532 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b3 c3       	rjmp	.+1894   	; 0x7f8 <__vector_36>
      92:	00 00       	nop
      94:	80 c3       	rjmp	.+1792   	; 0x796 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2a c2       	rjmp	.+1108   	; 0x4fe <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e6 ed       	ldi	r30, 0xD6	; 214
     14c:	f3 e3       	ldi	r31, 0x33	; 51
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	af 30       	cpi	r26, 0x0F	; 15
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	6b d1       	rcall	.+726    	; 0x446 <main>
     170:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	1f 92       	push	r1
     17c:	1f 92       	push	r1
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	9a 83       	std	Y+2, r25	; 0x02
     184:	89 83       	std	Y+1, r24	; 0x01
	appDataReqBusy = false;
     186:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <appDataReqBusy>
	(void)req;
}
     18a:	00 00       	nop
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <appSendData>:

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
if (appDataReqBusy || 0 == appUartBufferPtr)
     19e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <appDataReqBusy>
     1a2:	88 23       	and	r24, r24
     1a4:	b9 f5       	brne	.+110    	; 0x214 <appSendData+0x7e>
     1a6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     1aa:	88 23       	and	r24, r24
     1ac:	99 f1       	breq	.+102    	; 0x214 <appSendData+0x7e>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     1ae:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     1b2:	88 2f       	mov	r24, r24
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	ac 01       	movw	r20, r24
     1b8:	61 e9       	ldi	r22, 0x91	; 145
     1ba:	72 e0       	ldi	r23, 0x02	; 2
     1bc:	84 e2       	ldi	r24, 0x24	; 36
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	0e 94 9e 19 	call	0x333c	; 0x333c <memcpy>

appDataReq.dstAddr = 1-APP_ADDR;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <appDataReq+0x6>
     1cc:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <appDataReq+0x5>
appDataReq.dstEndpoint = APP_ENDPOINT;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <appDataReq+0x7>
appDataReq.srcEndpoint = APP_ENDPOINT;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <appDataReq+0x8>
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <appDataReq+0x9>
appDataReq.data = appDataReqBuffer;
     1e2:	84 e2       	ldi	r24, 0x24	; 36
     1e4:	92 e0       	ldi	r25, 0x02	; 2
     1e6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <appDataReq+0xb>
     1ea:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <appDataReq+0xa>
appDataReq.size = appUartBufferPtr;
     1ee:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     1f2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <appDataReq+0xc>
appDataReq.confirm = appDataConf;
     1f6:	8b eb       	ldi	r24, 0xBB	; 187
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <appDataReq+0xe>
     1fe:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <appDataReq+0xd>
NWK_DataReq(&appDataReq);
     202:	82 e1       	ldi	r24, 0x12	; 18
     204:	92 e0       	ldi	r25, 0x02	; 2
     206:	84 d4       	rcall	.+2312   	; 0xb10 <NWK_DataReq>

appUartBufferPtr = 0;
     208:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <appUartBufferPtr>
appDataReqBusy = true;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <appDataReqBusy>
     212:	01 c0       	rjmp	.+2      	; 0x216 <appSendData+0x80>
/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
if (appDataReqBusy || 0 == appUartBufferPtr)
return;
     214:	00 00       	nop
appDataReq.confirm = appDataConf;
NWK_DataReq(&appDataReq);

appUartBufferPtr = 0;
appDataReqBusy = true;
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <appSendWithACK>:

static void appSendWithACK(void)
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	char ack = 06;
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	89 83       	std	Y+1, r24	; 0x01
	appDataReq.dstAddr = 1-APP_ADDR;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <appDataReq+0x6>
     232:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <appDataReq+0x5>
	appDataReq.dstEndpoint = APP_ENDPOINT;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <appDataReq+0x7>
	appDataReq.srcEndpoint = APP_ENDPOINT;
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <appDataReq+0x8>
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <appDataReq+0x9>
	appDataReq.data = &ack;
     248:	ce 01       	movw	r24, r28
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <appDataReq+0xb>
     250:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <appDataReq+0xa>
	appDataReq.size = sizeof(ack);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <appDataReq+0xc>
	appDataReq.confirm = appDataConf;
     25a:	8b eb       	ldi	r24, 0xBB	; 187
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <appDataReq+0xe>
     262:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <appDataReq+0xd>
	NWK_DataReq(&appDataReq);
     266:	82 e1       	ldi	r24, 0x12	; 18
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	52 d4       	rcall	.+2212   	; 0xb10 <NWK_DataReq>

	appUartBufferPtr = 0;
     26c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <appUartBufferPtr>
	appDataReqBusy = true;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <appDataReqBusy>
}
     276:	00 00       	nop
     278:	0f 90       	pop	r0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <HAL_UartBytesReceived>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	00 d0       	rcall	.+0      	; 0x286 <HAL_UartBytesReceived+0x6>
     286:	1f 92       	push	r1
     288:	1f 92       	push	r1
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	9d 83       	std	Y+5, r25	; 0x05
     290:	8c 83       	std	Y+4, r24	; 0x04
for (uint16_t i = 0; i < bytes; i++)
     292:	1a 82       	std	Y+2, r1	; 0x02
     294:	19 82       	std	Y+1, r1	; 0x01
     296:	1d c0       	rjmp	.+58     	; 0x2d2 <HAL_UartBytesReceived+0x52>
{
uint8_t byte = HAL_UartReadByte();
     298:	3b d2       	rcall	.+1142   	; 0x710 <HAL_UartReadByte>
     29a:	8b 83       	std	Y+3, r24	; 0x03

if (appUartBufferPtr == sizeof(appUartBuffer))
     29c:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     2a0:	8d 36       	cpi	r24, 0x6D	; 109
appSendData();
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <HAL_UartBytesReceived+0x26>
     2a4:	78 df       	rcall	.-272    	; 0x196 <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     2a6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     2aa:	8d 36       	cpi	r24, 0x6D	; 109
     2ac:	68 f4       	brcc	.+26     	; 0x2c8 <HAL_UartBytesReceived+0x48>
appUartBuffer[appUartBufferPtr++] = byte;
     2ae:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appUartBufferPtr>
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	98 0f       	add	r25, r24
     2b6:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <appUartBufferPtr>
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	8f 56       	subi	r24, 0x6F	; 111
     2c0:	9d 4f       	sbci	r25, 0xFD	; 253
     2c2:	2b 81       	ldd	r18, Y+3	; 0x03
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	9a 83       	std	Y+2, r25	; 0x02
     2d0:	89 83       	std	Y+1, r24	; 0x01
     2d2:	29 81       	ldd	r18, Y+1	; 0x01
     2d4:	3a 81       	ldd	r19, Y+2	; 0x02
     2d6:	8c 81       	ldd	r24, Y+4	; 0x04
     2d8:	9d 81       	ldd	r25, Y+5	; 0x05
     2da:	28 17       	cp	r18, r24
     2dc:	39 07       	cpc	r19, r25
     2de:	e0 f2       	brcs	.-72     	; 0x298 <HAL_UartBytesReceived+0x18>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     2e8:	85 e0       	ldi	r24, 0x05	; 5
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <SYS_TimerStart>
}
     2f0:	00 00       	nop
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	1f 92       	push	r1
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	89 83       	std	Y+1, r24	; 0x01
appSendData();
     312:	41 df       	rcall	.-382    	; 0x196 <appSendData>
(void)timer;
}
     314:	00 00       	nop
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <appDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	00 d0       	rcall	.+0      	; 0x326 <appDataInd+0x6>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9b 83       	std	Y+3, r25	; 0x03
     32c:	8a 83       	std	Y+2, r24	; 0x02
	if (ind->data[0] == 06 && ind->size == 1) {
     32e:	8a 81       	ldd	r24, Y+2	; 0x02
     330:	9b 81       	ldd	r25, Y+3	; 0x03
     332:	fc 01       	movw	r30, r24
     334:	87 81       	ldd	r24, Z+7	; 0x07
     336:	90 85       	ldd	r25, Z+8	; 0x08
     338:	fc 01       	movw	r30, r24
     33a:	80 81       	ld	r24, Z
     33c:	86 30       	cpi	r24, 0x06	; 6
     33e:	f9 f4       	brne	.+62     	; 0x37e <appDataInd+0x5e>
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	9b 81       	ldd	r25, Y+3	; 0x03
     344:	fc 01       	movw	r30, r24
     346:	81 85       	ldd	r24, Z+9	; 0x09
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	c9 f4       	brne	.+50     	; 0x37e <appDataInd+0x5e>
		HAL_UartWriteByte('L');
     34c:	8c e4       	ldi	r24, 0x4C	; 76
     34e:	9d d1       	rcall	.+826    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('U');
     350:	85 e5       	ldi	r24, 0x55	; 85
     352:	9b d1       	rcall	.+822    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('K');
     354:	8b e4       	ldi	r24, 0x4B	; 75
     356:	99 d1       	rcall	.+818    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('A');
     358:	81 e4       	ldi	r24, 0x41	; 65
     35a:	97 d1       	rcall	.+814    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('S');
     35c:	83 e5       	ldi	r24, 0x53	; 83
     35e:	95 d1       	rcall	.+810    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('j');
     360:	8a e6       	ldi	r24, 0x6A	; 106
     362:	93 d1       	rcall	.+806    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('e');
     364:	85 e6       	ldi	r24, 0x65	; 101
     366:	91 d1       	rcall	.+802    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('D');
     368:	84 e4       	ldi	r24, 0x44	; 68
     36a:	8f d1       	rcall	.+798    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('E');
     36c:	85 e4       	ldi	r24, 0x45	; 69
     36e:	8d d1       	rcall	.+794    	; 0x68a <HAL_UartWriteByte>
     370:	82 e4       	ldi	r24, 0x42	; 66
		HAL_UartWriteByte('B');
     372:	8b d1       	rcall	.+790    	; 0x68a <HAL_UartWriteByte>
     374:	89 e4       	ldi	r24, 0x49	; 73
     376:	89 d1       	rcall	.+786    	; 0x68a <HAL_UartWriteByte>
		HAL_UartWriteByte('I');
     378:	8c e4       	ldi	r24, 0x4C	; 76
     37a:	87 d1       	rcall	.+782    	; 0x68a <HAL_UartWriteByte>
     37c:	1a c0       	rjmp	.+52     	; 0x3b2 <appDataInd+0x92>
		HAL_UartWriteByte('L');
     37e:	19 82       	std	Y+1, r1	; 0x01
     380:	10 c0       	rjmp	.+32     	; 0x3a2 <appDataInd+0x82>
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	9b 81       	ldd	r25, Y+3	; 0x03
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     386:	fc 01       	movw	r30, r24
     388:	27 81       	ldd	r18, Z+7	; 0x07
			HAL_UartWriteByte(ind->data[i]);
     38a:	30 85       	ldd	r19, Z+8	; 0x08
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	88 2f       	mov	r24, r24
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	82 0f       	add	r24, r18
     394:	93 1f       	adc	r25, r19
     396:	fc 01       	movw	r30, r24
     398:	80 81       	ld	r24, Z
     39a:	77 d1       	rcall	.+750    	; 0x68a <HAL_UartWriteByte>
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	8f 5f       	subi	r24, 0xFF	; 255
     3a0:	89 83       	std	Y+1, r24	; 0x01
		HAL_UartWriteByte('E');
		HAL_UartWriteByte('B');
		HAL_UartWriteByte('I');
		HAL_UartWriteByte('L');
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	9b 81       	ldd	r25, Y+3	; 0x03
     3a6:	fc 01       	movw	r30, r24
     3a8:	91 85       	ldd	r25, Z+9	; 0x09
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	89 17       	cp	r24, r25
     3ae:	48 f3       	brcs	.-46     	; 0x382 <appDataInd+0x62>
     3b0:	35 df       	rcall	.-406    	; 0x21c <appSendWithACK>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	0f 90       	pop	r0
			HAL_UartWriteByte(ind->data[i]);
		}
		appSendWithACK();
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
	}
	return true;
     3ba:	df 91       	pop	r29
}
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <appInit>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	3c d3       	rcall	.+1656   	; 0xa46 <NWK_SetAddr>
NWK_SetPanId(APP_PANID);
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	51 d3       	rcall	.+1698   	; 0xa76 <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     3d4:	8f e1       	ldi	r24, 0x1F	; 31
     3d6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     3e0:	60 e9       	ldi	r22, 0x90	; 144
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	5f d3       	rcall	.+1726   	; 0xaa6 <NWK_OpenEndpoint>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     3e8:	84 e1       	ldi	r24, 0x14	; 20
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	a0 e0       	ldi	r26, 0x00	; 0
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <appTimer+0x6>
     3f4:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <appTimer+0x7>
     3f8:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <appTimer+0x8>
     3fc:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <appTimer+0x9>
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     400:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <appTimer+0xa>
appTimer.handler = appTimerHandler;
     404:	81 e8       	ldi	r24, 0x81	; 129
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <appTimer+0xc>
     40c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <appTimer+0xb>
}
     410:	00 00       	nop
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <APP_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
switch (appState)
     420:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	00 97       	sbiw	r24, 0x00	; 0
     42a:	19 f0       	breq	.+6      	; 0x432 <APP_TaskHandler+0x1a>
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	31 f0       	breq	.+12     	; 0x43c <APP_TaskHandler+0x24>
		// nic
	break;

	default:
	
	break;
     430:	06 c0       	rjmp	.+12     	; 0x43e <APP_TaskHandler+0x26>
{
switch (appState)
{
	case APP_STATE_INITIAL: 
		{
		appInit();
     432:	c6 df       	rcall	.-116    	; 0x3c0 <appInit>
		appState = APP_STATE_IDLE;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
		} 
	break;
     43a:	01 c0       	rjmp	.+2      	; 0x43e <APP_TaskHandler+0x26>

	case APP_STATE_IDLE:
		// nic
	break;
     43c:	00 00       	nop

	default:
	
	break;
}
}
     43e:	00 00       	nop
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
SYS_Init();
     44e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <SYS_Init>
HAL_UartInit(38400);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	76 e9       	ldi	r23, 0x96	; 150
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	83 d0       	rcall	.+262    	; 0x562 <HAL_UartInit>
HAL_UartWriteByte('j');
     45c:	8a e6       	ldi	r24, 0x6A	; 106
     45e:	15 d1       	rcall	.+554    	; 0x68a <HAL_UartWriteByte>

while (1)
{
SYS_TaskHandler();
     460:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <SYS_TaskHandler>
HAL_UartTaskHandler();
     464:	42 d2       	rcall	.+1156   	; 0x8ea <HAL_UartTaskHandler>
APP_TaskHandler();
     466:	d8 df       	rcall	.-80     	; 0x418 <APP_TaskHandler>
     468:	fb cf       	rjmp	.-10     	; 0x460 <main+0x1a>

0000046a <HAL_Init>:
}
     46a:	cf 93       	push	r28
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
     46c:	df 93       	push	r29
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
  MCUSR = 0;
     472:	84 e5       	ldi	r24, 0x54	; 84
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	fc 01       	movw	r30, r24
     478:	10 82       	st	Z, r1
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	a8 95       	wdr
     480:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     484:	88 61       	ori	r24, 0x18	; 24
     486:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     48a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     48e:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     490:	81 e6       	ldi	r24, 0x61	; 97
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	20 e8       	ldi	r18, 0x80	; 128
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
  CLKPR = 0;
     49a:	81 e6       	ldi	r24, 0x61	; 97
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	fc 01       	movw	r30, r24
     4a0:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     4a2:	78 94       	sei

  HAL_TimerInit();
     4a4:	04 d0       	rcall	.+8      	; 0x4ae <HAL_TimerInit>
}
     4a6:	00 00       	nop
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
     4ba:	88 ea       	ldi	r24, 0xA8	; 168
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	20 e1       	ldi	r18, 0x10	; 16
     4c0:	37 e2       	ldi	r19, 0x27	; 39
     4c2:	fc 01       	movw	r30, r24
     4c4:	31 83       	std	Z+1, r19	; 0x01
     4c6:	20 83       	st	Z, r18
     4c8:	81 ea       	ldi	r24, 0xA1	; 161
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	28 e0       	ldi	r18, 0x08	; 8
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 83       	st	Z, r18
     4d2:	81 ea       	ldi	r24, 0xA1	; 161
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	21 ea       	ldi	r18, 0xA1	; 161
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	f9 01       	movw	r30, r18
     4dc:	20 81       	ld	r18, Z
     4de:	22 60       	ori	r18, 0x02	; 2
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
     4e4:	82 e7       	ldi	r24, 0x72	; 114
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	22 e7       	ldi	r18, 0x72	; 114
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	f9 01       	movw	r30, r18
     4ee:	20 81       	ld	r18, Z
     4f0:	22 60       	ori	r18, 0x02	; 2
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 83       	st	Z, r18
     4f6:	00 00       	nop
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	8f 93       	push	r24
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount++;
     514:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <halTimerIrqCount>
}
     51e:	00 00       	nop
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	8f 91       	pop	r24
     526:	0f 90       	pop	r0
     528:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	8f 93       	push	r24
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
  halSleepTimerEvent = true;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <halSleepTimerEvent>
}
     54e:	00 00       	nop
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	8f 91       	pop	r24
     556:	0f 90       	pop	r0
     558:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     55c:	0f 90       	pop	r0
     55e:	1f 90       	pop	r1
     560:	18 95       	reti

00000562 <HAL_UartInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	28 97       	sbiw	r28, 0x08	; 8
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	6d 83       	std	Y+5, r22	; 0x05
     578:	7e 83       	std	Y+6, r23	; 0x06
     57a:	8f 83       	std	Y+7, r24	; 0x07
     57c:	98 87       	std	Y+8, r25	; 0x08
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     57e:	8d 81       	ldd	r24, Y+5	; 0x05
     580:	9e 81       	ldd	r25, Y+6	; 0x06
     582:	af 81       	ldd	r26, Y+7	; 0x07
     584:	b8 85       	ldd	r27, Y+8	; 0x08
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	aa 1f       	adc	r26, r26
     58c:	bb 1f       	adc	r27, r27
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	aa 1f       	adc	r26, r26
     594:	bb 1f       	adc	r27, r27
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	aa 1f       	adc	r26, r26
     59c:	bb 1f       	adc	r27, r27
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	aa 1f       	adc	r26, r26
     5a4:	bb 1f       	adc	r27, r27
     5a6:	9c 01       	movw	r18, r24
     5a8:	ad 01       	movw	r20, r26
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	94 e2       	ldi	r25, 0x24	; 36
     5ae:	a4 ef       	ldi	r26, 0xF4	; 244
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	bc 01       	movw	r22, r24
     5b4:	cd 01       	movw	r24, r26
     5b6:	0e 94 27 19 	call	0x324e	; 0x324e <__udivmodsi4>
     5ba:	da 01       	movw	r26, r20
     5bc:	c9 01       	movw	r24, r18
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	a1 09       	sbc	r26, r1
     5c2:	b1 09       	sbc	r27, r1
     5c4:	89 83       	std	Y+1, r24	; 0x01
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	ab 83       	std	Y+3, r26	; 0x03
     5ca:	bc 83       	std	Y+4, r27	; 0x04

  UBRRxH = (brr >> 8) & 0xff;
     5cc:	2d ec       	ldi	r18, 0xCD	; 205
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	ab 81       	ldd	r26, Y+3	; 0x03
     5d6:	bc 81       	ldd	r27, Y+4	; 0x04
     5d8:	89 2f       	mov	r24, r25
     5da:	9a 2f       	mov	r25, r26
     5dc:	ab 2f       	mov	r26, r27
     5de:	bb 27       	eor	r27, r27
     5e0:	f9 01       	movw	r30, r18
     5e2:	80 83       	st	Z, r24
  UBRRxL = (brr & 0xff);
     5e4:	8c ec       	ldi	r24, 0xCC	; 204
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
  UCSRxA = (1 << U2X1);
     5ee:	88 ec       	ldi	r24, 0xC8	; 200
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	22 e0       	ldi	r18, 0x02	; 2
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     5f8:	89 ec       	ldi	r24, 0xC9	; 201
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	28 e9       	ldi	r18, 0x98	; 152
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
  UCSRxC = (3 << UCSZ10);
     602:	8a ec       	ldi	r24, 0xCA	; 202
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	26 e0       	ldi	r18, 0x06	; 6
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18

  txFifo.data = txData;
     60c:	8a e0       	ldi	r24, 0x0A	; 10
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <txFifo+0x9>
     614:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <txFifo+0x8>
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     618:	80 e9       	ldi	r24, 0x90	; 144
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <txFifo+0x5>
     620:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <txFifo+0x4>
  txFifo.bytes = 0;
     624:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <txFifo+0x7>
     628:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <txFifo+0x6>
  txFifo.head = 0;
     62c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <txFifo+0x1>
     630:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <txFifo>
  txFifo.tail = 0;
     634:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <txFifo+0x3>
     638:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <txFifo+0x2>

  rxFifo.data = rxData;
     63c:	85 ea       	ldi	r24, 0xA5	; 165
     63e:	94 e0       	ldi	r25, 0x04	; 4
     640:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <rxFifo+0x9>
     644:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <rxFifo+0x8>
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     648:	80 e9       	ldi	r24, 0x90	; 144
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <rxFifo+0x5>
     650:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <rxFifo+0x4>
  rxFifo.bytes = 0;
     654:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <rxFifo+0x7>
     658:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <rxFifo+0x6>
  rxFifo.head = 0;
     65c:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <rxFifo+0x1>
     660:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <rxFifo>
  rxFifo.tail = 0;
     664:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <rxFifo+0x3>
     668:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <rxFifo+0x2>

  udrEmpty = true;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <udrEmpty>
  newData = false;
     672:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <newData>
}
     676:	00 00       	nop
     678:	28 96       	adiw	r28, 0x08	; 8
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <HAL_UartWriteByte>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	1f 92       	push	r1
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	89 83       	std	Y+1, r24	; 0x01
  if (txFifo.bytes == txFifo.size)
     696:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <txFifo+0x6>
     69a:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <txFifo+0x7>
     69e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <txFifo+0x4>
     6a2:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <txFifo+0x5>
     6a6:	28 17       	cp	r18, r24
     6a8:	39 07       	cpc	r19, r25
     6aa:	69 f1       	breq	.+90     	; 0x706 <HAL_UartWriteByte+0x7c>
    return;

  txFifo.data[txFifo.tail++] = byte;
     6ac:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <txFifo+0x8>
     6b0:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <txFifo+0x9>
     6b4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <txFifo+0x2>
     6b8:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <txFifo+0x3>
     6bc:	ac 01       	movw	r20, r24
     6be:	4f 5f       	subi	r20, 0xFF	; 255
     6c0:	5f 4f       	sbci	r21, 0xFF	; 255
     6c2:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <txFifo+0x3>
     6c6:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <txFifo+0x2>
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	29 81       	ldd	r18, Y+1	; 0x01
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
  if (txFifo.tail == txFifo.size)
     6d4:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <txFifo+0x2>
     6d8:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <txFifo+0x3>
     6dc:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <txFifo+0x4>
     6e0:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <txFifo+0x5>
     6e4:	28 17       	cp	r18, r24
     6e6:	39 07       	cpc	r19, r25
     6e8:	21 f4       	brne	.+8      	; 0x6f2 <HAL_UartWriteByte+0x68>
    txFifo.tail = 0;
     6ea:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <txFifo+0x3>
     6ee:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <txFifo+0x2>
  txFifo.bytes++;
     6f2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <txFifo+0x6>
     6f6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <txFifo+0x7>
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <txFifo+0x7>
     700:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <txFifo+0x6>
     704:	01 c0       	rjmp	.+2      	; 0x708 <HAL_UartWriteByte+0x7e>
/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
  if (txFifo.bytes == txFifo.size)
    return;
     706:	00 00       	nop

  txFifo.data[txFifo.tail++] = byte;
  if (txFifo.tail == txFifo.size)
    txFifo.tail = 0;
  txFifo.bytes++;
}
     708:	0f 90       	pop	r0
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <HAL_UartReadByte>:

/*************************************************************************//**
*****************************************************************************/
uint8_t HAL_UartReadByte(void)
{
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	1f 92       	push	r1
     716:	1f 92       	push	r1
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     71c:	8f e5       	ldi	r24, 0x5F	; 95
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     728:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <rxFifo+0x8>
     72c:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <rxFifo+0x9>
     730:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <rxFifo>
     734:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <rxFifo+0x1>
     738:	ac 01       	movw	r20, r24
     73a:	4f 5f       	subi	r20, 0xFF	; 255
     73c:	5f 4f       	sbci	r21, 0xFF	; 255
     73e:	50 93 9c 04 	sts	0x049C, r21	; 0x80049c <rxFifo+0x1>
     742:	40 93 9b 04 	sts	0x049B, r20	; 0x80049b <rxFifo>
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	8a 83       	std	Y+2, r24	; 0x02
    if (rxFifo.head == rxFifo.size)
     750:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <rxFifo>
     754:	30 91 9c 04 	lds	r19, 0x049C	; 0x80049c <rxFifo+0x1>
     758:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <rxFifo+0x4>
     75c:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <rxFifo+0x5>
     760:	28 17       	cp	r18, r24
     762:	39 07       	cpc	r19, r25
     764:	21 f4       	brne	.+8      	; 0x76e <HAL_UartReadByte+0x5e>
      rxFifo.head = 0;
     766:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <rxFifo+0x1>
     76a:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <rxFifo>
    rxFifo.bytes--;
     76e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     772:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <rxFifo+0x7>
     77c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <rxFifo+0x6>
  ATOMIC_SECTION_LEAVE
     780:	8f e5       	ldi	r24, 0x5F	; 95
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	29 81       	ldd	r18, Y+1	; 0x01
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
  PRAGMA(diag_default=Pa082);

  return byte;
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     796:	1f 92       	push	r1
     798:	0f 92       	push	r0
     79a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7a6:	0f 92       	push	r0
     7a8:	2f 93       	push	r18
     7aa:	3f 93       	push	r19
     7ac:	8f 93       	push	r24
     7ae:	9f 93       	push	r25
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
  udrEmpty = true;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     7c2:	89 ec       	ldi	r24, 0xC9	; 201
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	29 ec       	ldi	r18, 0xC9	; 201
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	2f 7d       	andi	r18, 0xDF	; 223
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
}
     7d4:	00 00       	nop
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	ff 91       	pop	r31
     7dc:	ef 91       	pop	r30
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	0f 90       	pop	r0
     7e8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7ec:	0f 90       	pop	r0
     7ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     800:	0f 92       	push	r0
     802:	11 24       	eor	r1, r1
     804:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     808:	0f 92       	push	r0
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	ef 93       	push	r30
     818:	ff 93       	push	r31
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	1f 92       	push	r1
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     826:	88 ec       	ldi	r24, 0xC8	; 200
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	89 83       	std	Y+1, r24	; 0x01
  uint8_t byte = UDRx;
     830:	8e ec       	ldi	r24, 0xCE	; 206
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	8a 83       	std	Y+2, r24	; 0x02

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	8c 71       	andi	r24, 0x1C	; 28
     842:	99 27       	eor	r25, r25
     844:	89 2b       	or	r24, r25
     846:	e1 f5       	brne	.+120    	; 0x8c0 <__vector_36+0xc8>
  {
    if (rxFifo.bytes == rxFifo.size)
     848:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     84c:	30 91 a2 04 	lds	r19, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     850:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <rxFifo+0x4>
     854:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <rxFifo+0x5>
     858:	28 17       	cp	r18, r24
     85a:	39 07       	cpc	r19, r25
     85c:	81 f1       	breq	.+96     	; 0x8be <__vector_36+0xc6>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     85e:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <rxFifo+0x8>
     862:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <rxFifo+0x9>
     866:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <rxFifo+0x2>
     86a:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <rxFifo+0x3>
     86e:	ac 01       	movw	r20, r24
     870:	4f 5f       	subi	r20, 0xFF	; 255
     872:	5f 4f       	sbci	r21, 0xFF	; 255
     874:	50 93 9e 04 	sts	0x049E, r21	; 0x80049e <rxFifo+0x3>
     878:	40 93 9d 04 	sts	0x049D, r20	; 0x80049d <rxFifo+0x2>
     87c:	82 0f       	add	r24, r18
     87e:	93 1f       	adc	r25, r19
     880:	2a 81       	ldd	r18, Y+2	; 0x02
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
    if (rxFifo.tail == rxFifo.size)
     886:	20 91 9d 04 	lds	r18, 0x049D	; 0x80049d <rxFifo+0x2>
     88a:	30 91 9e 04 	lds	r19, 0x049E	; 0x80049e <rxFifo+0x3>
     88e:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <rxFifo+0x4>
     892:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <rxFifo+0x5>
     896:	28 17       	cp	r18, r24
     898:	39 07       	cpc	r19, r25
     89a:	21 f4       	brne	.+8      	; 0x8a4 <__vector_36+0xac>
      rxFifo.tail = 0;
     89c:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <rxFifo+0x3>
     8a0:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <rxFifo+0x2>
    rxFifo.bytes++;
     8a4:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     8a8:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <rxFifo+0x7>
     8b2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <rxFifo+0x6>

    newData = true;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <newData>
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__vector_36+0xc8>
  uint8_t byte = UDRx;

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
  {
    if (rxFifo.bytes == rxFifo.size)
      return;
     8be:	00 00       	nop

    newData = true;
  }

  PRAGMA(diag_default=Pa082);
}
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	ff 91       	pop	r31
     8ca:	ef 91       	pop	r30
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     8de:	0f 90       	pop	r0
     8e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <HAL_UartTaskHandler+0x6>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <HAL_UartTaskHandler+0x8>
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
  if (txFifo.bytes && udrEmpty)
     8f6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <txFifo+0x6>
     8fa:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <txFifo+0x7>
     8fe:	89 2b       	or	r24, r25
     900:	09 f4       	brne	.+2      	; 0x904 <HAL_UartTaskHandler+0x1a>
     902:	4c c0       	rjmp	.+152    	; 0x99c <HAL_UartTaskHandler+0xb2>
     904:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <udrEmpty>
     908:	88 23       	and	r24, r24
     90a:	09 f4       	brne	.+2      	; 0x90e <HAL_UartTaskHandler+0x24>
     90c:	47 c0       	rjmp	.+142    	; 0x99c <HAL_UartTaskHandler+0xb2>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     90e:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <txFifo+0x8>
     912:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <txFifo+0x9>
     916:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <txFifo>
     91a:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <txFifo+0x1>
     91e:	ac 01       	movw	r20, r24
     920:	4f 5f       	subi	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	50 93 01 03 	sts	0x0301, r21	; 0x800301 <txFifo+0x1>
     928:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <txFifo>
     92c:	82 0f       	add	r24, r18
     92e:	93 1f       	adc	r25, r19
     930:	fc 01       	movw	r30, r24
     932:	80 81       	ld	r24, Z
     934:	89 83       	std	Y+1, r24	; 0x01
    if (txFifo.head == txFifo.size)
     936:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <txFifo>
     93a:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <txFifo+0x1>
     93e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <txFifo+0x4>
     942:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <txFifo+0x5>
     946:	28 17       	cp	r18, r24
     948:	39 07       	cpc	r19, r25
     94a:	21 f4       	brne	.+8      	; 0x954 <HAL_UartTaskHandler+0x6a>
      txFifo.head = 0;
     94c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <txFifo+0x1>
     950:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <txFifo>
    txFifo.bytes--;
     954:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <txFifo+0x6>
     958:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <txFifo+0x7>
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <txFifo+0x7>
     962:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     966:	8f e5       	ldi	r24, 0x5F	; 95
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	fc 01       	movw	r30, r24
     96c:	80 81       	ld	r24, Z
     96e:	8a 83       	std	Y+2, r24	; 0x02
     970:	f8 94       	cli
      UDRx = byte;
     972:	8e ec       	ldi	r24, 0xCE	; 206
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	29 81       	ldd	r18, Y+1	; 0x01
     978:	fc 01       	movw	r30, r24
     97a:	20 83       	st	Z, r18
      UCSRxB |= (1 << UDRIE1);
     97c:	89 ec       	ldi	r24, 0xC9	; 201
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	29 ec       	ldi	r18, 0xC9	; 201
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	f9 01       	movw	r30, r18
     986:	20 81       	ld	r18, Z
     988:	20 62       	ori	r18, 0x20	; 32
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
      udrEmpty = false;
     98e:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     992:	8f e5       	ldi	r24, 0x5F	; 95
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	2a 81       	ldd	r18, Y+2	; 0x02
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     99c:	8f e5       	ldi	r24, 0x5F	; 95
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	8b 83       	std	Y+3, r24	; 0x03
     9a6:	f8 94       	cli
      new = newData;
     9a8:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <newData>
     9ac:	8c 83       	std	Y+4, r24	; 0x04
      newData = false;
     9ae:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <newData>
      bytes = rxFifo.bytes;
     9b2:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <rxFifo+0x6>
     9b6:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <rxFifo+0x7>
     9ba:	9e 83       	std	Y+6, r25	; 0x06
     9bc:	8d 83       	std	Y+5, r24	; 0x05
    ATOMIC_SECTION_LEAVE
     9be:	8f e5       	ldi	r24, 0x5F	; 95
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	2b 81       	ldd	r18, Y+3	; 0x03
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18

    if (new)
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	88 23       	and	r24, r24
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <HAL_UartTaskHandler+0xea>
      HAL_UartBytesReceived(bytes);
     9ce:	8d 81       	ldd	r24, Y+5	; 0x05
     9d0:	9e 81       	ldd	r25, Y+6	; 0x06
     9d2:	56 dc       	rcall	.-1876   	; 0x280 <HAL_UartBytesReceived>
  }
}
     9d4:	00 00       	nop
     9d6:	26 96       	adiw	r28, 0x06	; 6
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	1f 92       	push	r1
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <nwkIb+0x4>
     9f6:	10 92 ec 19 	sts	0x19EC, r1	; 0x8019ec <nwkIb+0x5>
     9fa:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <nwkIb+0x1>
     9fe:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <nwkIb>
     a02:	10 92 0e 1a 	sts	0x1A0E, r1	; 0x801a0e <nwkIb+0x27>
     a06:	10 92 0d 1a 	sts	0x1A0D, r1	; 0x801a0d <nwkIb+0x26>
     a0a:	19 82       	std	Y+1, r1	; 0x01
     a0c:	0e c0       	rjmp	.+28     	; 0xa2a <NWK_Init+0x42>
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	03 96       	adiw	r24, 0x03	; 3
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	89 51       	subi	r24, 0x19	; 25
     a1c:	96 4e       	sbci	r25, 0xE6	; 230
     a1e:	fc 01       	movw	r30, r24
     a20:	11 82       	std	Z+1, r1	; 0x01
     a22:	10 82       	st	Z, r1
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	89 83       	std	Y+1, r24	; 0x01
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	80 31       	cpi	r24, 0x10	; 16
     a2e:	78 f3       	brcs	.-34     	; 0xa0e <NWK_Init+0x26>
     a30:	0e 94 3b 11 	call	0x2276	; 0x2276 <nwkTxInit>
     a34:	7d d7       	rcall	.+3834   	; 0x1930 <nwkRxInit>
     a36:	62 d2       	rcall	.+1220   	; 0xefc <nwkFrameInit>
     a38:	5f d0       	rcall	.+190    	; 0xaf8 <nwkDataReqInit>
     a3a:	6a d3       	rcall	.+1748   	; 0x1110 <nwkRouteInit>
     a3c:	00 00       	nop
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <NWK_SetAddr>:
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	1f 92       	push	r1
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	9a 81       	ldd	r25, Y+2	; 0x02
     a5a:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <nwkIb+0x1>
     a5e:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <nwkIb>
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <PHY_SetShortAddr>
     a6a:	00 00       	nop
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <NWK_SetPanId>:
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	1f 92       	push	r1
     a7c:	1f 92       	push	r1
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	9a 81       	ldd	r25, Y+2	; 0x02
     a8a:	90 93 ea 19 	sts	0x19EA, r25	; 0x8019ea <nwkIb+0x3>
     a8e:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <nwkIb+0x2>
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <PHY_SetPanId>
     a9a:	00 00       	nop
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <NWK_OpenEndpoint>:
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	00 d0       	rcall	.+0      	; 0xaac <NWK_OpenEndpoint+0x6>
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	89 83       	std	Y+1, r24	; 0x01
     ab2:	7b 83       	std	Y+3, r23	; 0x03
     ab4:	6a 83       	std	Y+2, r22	; 0x02
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	88 2f       	mov	r24, r24
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	03 96       	adiw	r24, 0x03	; 3
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	89 51       	subi	r24, 0x19	; 25
     ac4:	96 4e       	sbci	r25, 0xE6	; 230
     ac6:	2a 81       	ldd	r18, Y+2	; 0x02
     ac8:	3b 81       	ldd	r19, Y+3	; 0x03
     aca:	fc 01       	movw	r30, r24
     acc:	31 83       	std	Z+1, r19	; 0x01
     ace:	20 83       	st	Z, r18
     ad0:	00 00       	nop
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <NWK_TaskHandler>:

/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
  nwkRxTaskHandler();
     ae6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     aea:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     aee:	d1 d1       	rcall	.+930    	; 0xe92 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
#endif
}
     af0:	00 00       	nop
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <nwkDataReqInit>:

/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
  nwkDataReqQueue = NULL;
     b00:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <nwkDataReqQueue+0x1>
     b04:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <nwkDataReqQueue>
}
     b08:	00 00       	nop
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	1f 92       	push	r1
     b16:	1f 92       	push	r1
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	9a 83       	std	Y+2, r25	; 0x02
     b1e:	89 83       	std	Y+1, r24	; 0x01
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	fc 01       	movw	r30, r24
     b26:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	fc 01       	movw	r30, r24
     b2e:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	9a 81       	ldd	r25, Y+2	; 0x02
     b34:	fc 01       	movw	r30, r24
     b36:	13 82       	std	Z+3, r1	; 0x03
     b38:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     b3a:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
     b3e:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
     b48:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>

  if (NULL == nwkDataReqQueue)
     b4c:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     b50:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     b54:	89 2b       	or	r24, r25
     b56:	61 f4       	brne	.+24     	; 0xb70 <NWK_DataReq+0x60>
  {
    req->next = NULL;
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	fc 01       	movw	r30, r24
     b5e:	11 82       	std	Z+1, r1	; 0x01
     b60:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     b6a:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
  else
  {
    req->next = nwkDataReqQueue;
    nwkDataReqQueue = req;
  }
}
     b6e:	0f c0       	rjmp	.+30     	; 0xb8e <NWK_DataReq+0x7e>
    req->next = NULL;
    nwkDataReqQueue = req;
  }
  else
  {
    req->next = nwkDataReqQueue;
     b70:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <nwkDataReqQueue>
     b74:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	fc 01       	movw	r30, r24
     b7e:	31 83       	std	Z+1, r19	; 0x01
     b80:	20 83       	st	Z, r18
    nwkDataReqQueue = req;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     b8a:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
  }
}
     b8e:	00 00       	nop
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <nwkDataReqSendFrame+0x6>
     ba0:	1f 92       	push	r1
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     baa:	c7 d1       	rcall	.+910    	; 0xf3a <nwkFrameAlloc>
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	89 2b       	or	r24, r25
     bb6:	59 f4       	brne	.+22     	; 0xbce <nwkDataReqSendFrame+0x34>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	22 e0       	ldi	r18, 0x02	; 2
     bbe:	fc 01       	movw	r30, r24
     bc0:	24 83       	std	Z+4, r18	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	22 e0       	ldi	r18, 0x02	; 2
     bc8:	fc 01       	movw	r30, r24
     bca:	27 87       	std	Z+15, r18	; 0x0f
    return;
     bcc:	b6 c0       	rjmp	.+364    	; 0xd3a <nwkDataReqSendFrame+0x1a0>
  }

  req->frame = frame;
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	29 81       	ldd	r18, Y+1	; 0x01
     bd4:	3a 81       	ldd	r19, Y+2	; 0x02
     bd6:	fc 01       	movw	r30, r24
     bd8:	33 83       	std	Z+3, r19	; 0x03
     bda:	22 83       	std	Z+2, r18	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	21 e0       	ldi	r18, 0x01	; 1
     be2:	fc 01       	movw	r30, r24
     be4:	24 83       	std	Z+4, r18	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	89 57       	subi	r24, 0x79	; 121
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	24 ea       	ldi	r18, 0xA4	; 164
     bf0:	36 e0       	ldi	r19, 0x06	; 6
     bf2:	fc 01       	movw	r30, r24
     bf4:	31 83       	std	Z+1, r19	; 0x01
     bf6:	20 83       	st	Z, r18
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	fc 01       	movw	r30, r24
     bfe:	81 85       	ldd	r24, Z+9	; 0x09
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	84 70       	andi	r24, 0x04	; 4
     c06:	99 27       	eor	r25, r25
     c08:	21 e0       	ldi	r18, 0x01	; 1
     c0a:	89 2b       	or	r24, r25
     c0c:	09 f4       	brne	.+2      	; 0xc10 <nwkDataReqSendFrame+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	8a 57       	subi	r24, 0x7A	; 122
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	fc 01       	movw	r30, r24
     c22:	81 85       	ldd	r24, Z+9	; 0x09
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	81 70       	andi	r24, 0x01	; 1
     c2a:	99 27       	eor	r25, r25
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	89 2b       	or	r24, r25
     c30:	09 f4       	brne	.+2      	; 0xc34 <nwkDataReqSendFrame+0x9a>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	21 70       	andi	r18, 0x01	; 1
     c3a:	fc 01       	movw	r30, r24
     c3c:	33 85       	ldd	r19, Z+11	; 0x0b
     c3e:	3e 7f       	andi	r19, 0xFE	; 254
     c40:	23 2b       	or	r18, r19
     c42:	fc 01       	movw	r30, r24
     c44:	23 87       	std	Z+11, r18	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	fc 01       	movw	r30, r24
     c4c:	81 85       	ldd	r24, Z+9	; 0x09
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 70       	andi	r24, 0x08	; 8
     c54:	99 27       	eor	r25, r25
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	89 2b       	or	r24, r25
     c5a:	09 f4       	brne	.+2      	; 0xc5e <nwkDataReqSendFrame+0xc4>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	21 70       	andi	r18, 0x01	; 1
     c64:	22 0f       	add	r18, r18
     c66:	22 0f       	add	r18, r18
     c68:	fc 01       	movw	r30, r24
     c6a:	33 85       	ldd	r19, Z+11	; 0x0b
     c6c:	3b 7f       	andi	r19, 0xFB	; 251
     c6e:	23 2b       	or	r18, r19
     c70:	fc 01       	movw	r30, r24
     c72:	23 87       	std	Z+11, r18	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     c74:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <nwkIb+0x4>
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <nwkIb+0x4>
     c7e:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <nwkIb+0x4>
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	fc 01       	movw	r30, r24
     c88:	24 87       	std	Z+12, r18	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     c8a:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
     c8e:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	fc 01       	movw	r30, r24
     c98:	36 87       	std	Z+14, r19	; 0x0e
     c9a:	25 87       	std	Z+13, r18	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	fc 01       	movw	r30, r24
     ca2:	25 81       	ldd	r18, Z+5	; 0x05
     ca4:	36 81       	ldd	r19, Z+6	; 0x06
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	fc 01       	movw	r30, r24
     cac:	30 8b       	std	Z+16, r19	; 0x10
     cae:	27 87       	std	Z+15, r18	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 85       	ldd	r24, Z+8	; 0x08
     cb8:	28 2f       	mov	r18, r24
     cba:	2f 70       	andi	r18, 0x0F	; 15
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	2f 70       	andi	r18, 0x0F	; 15
     cc2:	fc 01       	movw	r30, r24
     cc4:	31 89       	ldd	r19, Z+17	; 0x11
     cc6:	30 7f       	andi	r19, 0xF0	; 240
     cc8:	23 2b       	or	r18, r19
     cca:	fc 01       	movw	r30, r24
     ccc:	21 8b       	std	Z+17, r18	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	fc 01       	movw	r30, r24
     cd4:	87 81       	ldd	r24, Z+7	; 0x07
     cd6:	28 2f       	mov	r18, r24
     cd8:	2f 70       	andi	r18, 0x0F	; 15
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	22 95       	swap	r18
     ce0:	20 7f       	andi	r18, 0xF0	; 240
     ce2:	fc 01       	movw	r30, r24
     ce4:	31 89       	ldd	r19, Z+17	; 0x11
     ce6:	3f 70       	andi	r19, 0x0F	; 15
     ce8:	23 2b       	or	r18, r19
     cea:	fc 01       	movw	r30, r24
     cec:	21 8b       	std	Z+17, r18	; 0x11

  memcpy(frame->payload, req->data, req->size);
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	fc 01       	movw	r30, r24
     cf4:	84 85       	ldd	r24, Z+12	; 0x0c
     cf6:	48 2f       	mov	r20, r24
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	fc 01       	movw	r30, r24
     d00:	22 85       	ldd	r18, Z+10	; 0x0a
     d02:	33 85       	ldd	r19, Z+11	; 0x0b
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	8f 57       	subi	r24, 0x7F	; 127
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	fc 01       	movw	r30, r24
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	b9 01       	movw	r22, r18
     d14:	0e 94 9e 19 	call	0x333c	; 0x333c <memcpy>
  frame->size += req->size;
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	fc 01       	movw	r30, r24
     d1e:	21 81       	ldd	r18, Z+1	; 0x01
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	fc 01       	movw	r30, r24
     d26:	84 85       	ldd	r24, Z+12	; 0x0c
     d28:	28 0f       	add	r18, r24
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	fc 01       	movw	r30, r24
     d30:	21 83       	std	Z+1, r18	; 0x01

  nwkTxFrame(frame);
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	0e 94 6f 11 	call	0x22de	; 0x22de <nwkTxFrame>
}
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <nwkDataReqTxConf>:
/*************************************************************************//**
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <nwkDataReqTxConf+0x6>
     d4e:	1f 92       	push	r1
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     d58:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     d5c:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	2b c0       	rjmp	.+86     	; 0xdbc <nwkDataReqTxConf+0x74>
  {
    if (req->frame == frame)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	22 81       	ldd	r18, Z+2	; 0x02
     d6e:	33 81       	ldd	r19, Z+3	; 0x03
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	28 17       	cp	r18, r24
     d76:	39 07       	cpc	r19, r25
     d78:	d1 f4       	brne	.+52     	; 0xdae <nwkDataReqTxConf+0x66>
    {
      req->status = frame->tx.status;
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9c 81       	ldd	r25, Y+4	; 0x04
     d7e:	8d 57       	subi	r24, 0x7D	; 125
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	fc 01       	movw	r30, r24
     d84:	20 81       	ld	r18, Z
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	fc 01       	movw	r30, r24
     d8c:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	8a 57       	subi	r24, 0x7A	; 122
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	fc 01       	movw	r30, r24
     d98:	20 81       	ld	r18, Z
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	fc 01       	movw	r30, r24
     da0:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	22 e0       	ldi	r18, 0x02	; 2
     da8:	fc 01       	movw	r30, r24
     daa:	24 83       	std	Z+4, r18	; 0x04
      break;
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <nwkDataReqTxConf+0x7c>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	fc 01       	movw	r30, r24
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	89 2b       	or	r24, r25
     dc2:	89 f6       	brne	.-94     	; 0xd66 <nwkDataReqTxConf+0x1e>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	2d d1       	rcall	.+602    	; 0x1024 <nwkFrameFree>
}
     dca:	00 00       	nop
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <nwkDataReqConfirm>:
/*************************************************************************//**
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <nwkDataReqConfirm+0x6>
     de0:	1f 92       	push	r1
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
  if (nwkDataReqQueue == req)
     dea:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <nwkDataReqQueue>
     dee:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	61 f4       	brne	.+24     	; 0xe14 <nwkDataReqConfirm+0x3a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     dfc:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     e00:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     e04:	fc 01       	movw	r30, r24
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     e0e:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
     e12:	25 c0       	rjmp	.+74     	; 0xe5e <nwkDataReqConfirm+0x84>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
     e14:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     e18:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
    while (prev->next != req)
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <nwkDataReqConfirm+0x56>
      prev = prev->next;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	fc 01       	movw	r30, r24
     e36:	20 81       	ld	r18, Z
     e38:	31 81       	ldd	r19, Z+1	; 0x01
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	28 17       	cp	r18, r24
     e40:	39 07       	cpc	r19, r25
     e42:	79 f7       	brne	.-34     	; 0xe22 <nwkDataReqConfirm+0x48>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	fc 01       	movw	r30, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	fc 01       	movw	r30, r24
     e50:	20 81       	ld	r18, Z
     e52:	31 81       	ldd	r19, Z+1	; 0x01
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	fc 01       	movw	r30, r24
     e5a:	31 83       	std	Z+1, r19	; 0x01
     e5c:	20 83       	st	Z, r18
  }

  nwkIb.lock--;
     e5e:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
     e62:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
     e6c:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
  req->confirm(req);
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	fc 01       	movw	r30, r24
     e76:	25 85       	ldd	r18, Z+13	; 0x0d
     e78:	36 85       	ldd	r19, Z+14	; 0x0e
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	f9 01       	movw	r30, r18
     e80:	19 95       	eicall
}
     e82:	00 00       	nop
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	1f 92       	push	r1
     e98:	1f 92       	push	r1
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     e9e:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     ea2:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	1f c0       	rjmp	.+62     	; 0xeea <nwkDataReqTaskHandler+0x58>
  {
    switch (req->state)
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	84 81       	ldd	r24, Z+4	; 0x04
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	71 f0       	breq	.+28     	; 0xeda <nwkDataReqTaskHandler+0x48>
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	91 05       	cpc	r25, r1
     ec2:	39 f0       	breq	.+14     	; 0xed2 <nwkDataReqTaskHandler+0x40>
     ec4:	89 2b       	or	r24, r25
     ec6:	09 f0       	breq	.+2      	; 0xeca <nwkDataReqTaskHandler+0x38>
        nwkDataReqConfirm(req);
        return;
      } break;

      default:
        break;
     ec8:	09 c0       	rjmp	.+18     	; 0xedc <nwkDataReqTaskHandler+0x4a>
  {
    switch (req->state)
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	65 de       	rcall	.-822    	; 0xb9a <nwkDataReqSendFrame>
        return;
     ed0:	10 c0       	rjmp	.+32     	; 0xef2 <nwkDataReqTaskHandler+0x60>
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	81 df       	rcall	.-254    	; 0xdda <nwkDataReqConfirm>
        return;
     ed8:	0c c0       	rjmp	.+24     	; 0xef2 <nwkDataReqTaskHandler+0x60>
        nwkDataReqSendFrame(req);
        return;
      } break;

      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;
     eda:	00 00       	nop
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	fc 01       	movw	r30, r24
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	89 2b       	or	r24, r25
     ef0:	e9 f6       	brne	.-70     	; 0xeac <nwkDataReqTaskHandler+0x1a>

      default:
        break;
    };
  }
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	1f 92       	push	r1
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	10 c0       	rjmp	.+32     	; 0xf2a <nwkFrameInit+0x2e>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	49 e8       	ldi	r20, 0x89	; 137
     f12:	42 9f       	mul	r20, r18
     f14:	c0 01       	movw	r24, r0
     f16:	43 9f       	mul	r20, r19
     f18:	90 0d       	add	r25, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	86 5c       	subi	r24, 0xC6	; 198
     f1e:	99 4f       	sbci	r25, 0xF9	; 249
     f20:	fc 01       	movw	r30, r24
     f22:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	8e 31       	cpi	r24, 0x1E	; 30
     f2e:	68 f3       	brcs	.-38     	; 0xf0a <nwkFrameInit+0xe>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     f30:	00 00       	nop
     f32:	0f 90       	pop	r0
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <nwkFrameAlloc>:
/*************************************************************************//**
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	1f 92       	push	r1
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     f44:	19 82       	std	Y+1, r1	; 0x01
     f46:	64 c0       	rjmp	.+200    	; 0x1010 <nwkFrameAlloc+0xd6>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	49 e8       	ldi	r20, 0x89	; 137
     f50:	42 9f       	mul	r20, r18
     f52:	c0 01       	movw	r24, r0
     f54:	43 9f       	mul	r20, r19
     f56:	90 0d       	add	r25, r0
     f58:	11 24       	eor	r1, r1
     f5a:	86 5c       	subi	r24, 0xC6	; 198
     f5c:	99 4f       	sbci	r25, 0xF9	; 249
     f5e:	fc 01       	movw	r30, r24
     f60:	80 81       	ld	r24, Z
     f62:	88 23       	and	r24, r24
     f64:	09 f0       	breq	.+2      	; 0xf68 <nwkFrameAlloc+0x2e>
     f66:	51 c0       	rjmp	.+162    	; 0x100a <nwkFrameAlloc+0xd0>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	49 e8       	ldi	r20, 0x89	; 137
     f70:	42 9f       	mul	r20, r18
     f72:	c0 01       	movw	r24, r0
     f74:	43 9f       	mul	r20, r19
     f76:	90 0d       	add	r25, r0
     f78:	11 24       	eor	r1, r1
     f7a:	86 5c       	subi	r24, 0xC6	; 198
     f7c:	99 4f       	sbci	r25, 0xF9	; 249
     f7e:	49 e8       	ldi	r20, 0x89	; 137
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	0e 94 a7 19 	call	0x334e	; 0x334e <memset>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	49 e8       	ldi	r20, 0x89	; 137
     f92:	42 9f       	mul	r20, r18
     f94:	c0 01       	movw	r24, r0
     f96:	43 9f       	mul	r20, r19
     f98:	90 0d       	add	r25, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	85 5c       	subi	r24, 0xC5	; 197
     f9e:	99 4f       	sbci	r25, 0xF9	; 249
     fa0:	20 e1       	ldi	r18, 0x10	; 16
     fa2:	fc 01       	movw	r30, r24
     fa4:	20 83       	st	Z, r18
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	48 2f       	mov	r20, r24
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	69 e8       	ldi	r22, 0x89	; 137
     fb4:	62 9f       	mul	r22, r18
     fb6:	c0 01       	movw	r24, r0
     fb8:	63 9f       	mul	r22, r19
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	02 96       	adiw	r24, 0x02	; 2
     fc0:	86 5c       	subi	r24, 0xC6	; 198
     fc2:	99 4f       	sbci	r25, 0xF9	; 249
     fc4:	9c 01       	movw	r18, r24
     fc6:	20 5f       	subi	r18, 0xF0	; 240
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	69 e8       	ldi	r22, 0x89	; 137
     fcc:	64 9f       	mul	r22, r20
     fce:	c0 01       	movw	r24, r0
     fd0:	65 9f       	mul	r22, r21
     fd2:	90 0d       	add	r25, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	85 54       	subi	r24, 0x45	; 69
     fd8:	99 4f       	sbci	r25, 0xF9	; 249
     fda:	fc 01       	movw	r30, r24
     fdc:	31 83       	std	Z+1, r19	; 0x01
     fde:	20 83       	st	Z, r18
      nwkIb.lock++;
     fe0:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
     fe4:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
     fee:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
      return &nwkFrameFrames[i];
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	49 e8       	ldi	r20, 0x89	; 137
     ffa:	42 9f       	mul	r20, r18
     ffc:	c0 01       	movw	r24, r0
     ffe:	43 9f       	mul	r20, r19
    1000:	90 0d       	add	r25, r0
    1002:	11 24       	eor	r1, r1
    1004:	86 5c       	subi	r24, 0xC6	; 198
    1006:	99 4f       	sbci	r25, 0xF9	; 249
    1008:	09 c0       	rjmp	.+18     	; 0x101c <nwkFrameAlloc+0xe2>
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	8e 31       	cpi	r24, 0x1E	; 30
    1014:	08 f4       	brcc	.+2      	; 0x1018 <nwkFrameAlloc+0xde>
    1016:	98 cf       	rjmp	.-208    	; 0xf48 <nwkFrameAlloc+0xe>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
}
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <nwkFrameFree>:
/*************************************************************************//**
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	1f 92       	push	r1
    102a:	1f 92       	push	r1
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
  frame->state = NWK_FRAME_STATE_FREE;
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	fc 01       	movw	r30, r24
    103a:	10 82       	st	Z, r1
  nwkIb.lock--;
    103c:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
    1040:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
    104a:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
}
    104e:	00 00       	nop
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <nwkFrameNext>:
  @brief Cycles through the allocated frames starting from the specified @a frame
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	1f 92       	push	r1
    1060:	1f 92       	push	r1
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
  if (NULL == frame)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	89 2b       	or	r24, r25
    1070:	29 f4       	brne	.+10     	; 0x107c <nwkFrameNext+0x22>
    frame = nwkFrameFrames;
    1072:	8a e3       	ldi	r24, 0x3A	; 58
    1074:	96 e0       	ldi	r25, 0x06	; 6
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	16 c0       	rjmp	.+44     	; 0x10a8 <nwkFrameNext+0x4e>
  else
    frame++;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	87 57       	subi	r24, 0x77	; 119
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <nwkFrameNext+0x4e>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	88 23       	and	r24, r24
    1094:	19 f0       	breq	.+6      	; 0x109c <nwkFrameNext+0x42>
      return frame;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <nwkFrameNext+0x5c>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	87 57       	subi	r24, 0x77	; 119
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	88 54       	subi	r24, 0x48	; 72
    10ae:	96 41       	sbci	r25, 0x16	; 22
    10b0:	60 f3       	brcs	.-40     	; 0x108a <nwkFrameNext+0x30>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	1f 92       	push	r1
    10c6:	1f 92       	push	r1
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
  frame->tx.status = NWK_SUCCESS_STATUS;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	8d 57       	subi	r24, 0x7D	; 125
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	fc 01       	movw	r30, r24
    10da:	10 82       	st	Z, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    10dc:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <nwkIb+0x4>
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <nwkIb+0x4>
    10e6:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <nwkIb+0x4>
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	fc 01       	movw	r30, r24
    10f0:	24 87       	std	Z+12, r18	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    10f2:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    10f6:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	fc 01       	movw	r30, r24
    1100:	36 87       	std	Z+14, r19	; 0x0e
    1102:	25 87       	std	Z+13, r18	; 0x0d
#ifdef NWK_ENABLE_SECURE_COMMANDS
  frame->header.nwkFcf.security = 1;
#endif
}
    1104:	00 00       	nop
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	1f 92       	push	r1
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	19 82       	std	Y+1, r1	; 0x01
    111c:	39 c0       	rjmp	.+114    	; 0x1190 <nwkRouteInit+0x80>
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	c9 01       	movw	r24, r18
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	82 1b       	sub	r24, r18
    1134:	93 0b       	sbc	r25, r19
    1136:	87 5b       	subi	r24, 0xB7	; 183
    1138:	99 4e       	sbci	r25, 0xE9	; 233
    113a:	2f ef       	ldi	r18, 0xFF	; 255
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	fc 01       	movw	r30, r24
    1140:	31 83       	std	Z+1, r19	; 0x01
    1142:	20 83       	st	Z, r18
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	c9 01       	movw	r24, r18
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	82 1b       	sub	r24, r18
    115a:	93 0b       	sbc	r25, r19
    115c:	88 5b       	subi	r24, 0xB8	; 184
    115e:	99 4e       	sbci	r25, 0xE9	; 233
    1160:	fc 01       	movw	r30, r24
    1162:	20 81       	ld	r18, Z
    1164:	2e 7f       	andi	r18, 0xFE	; 254
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	c9 01       	movw	r24, r18
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	82 1b       	sub	r24, r18
    1180:	93 0b       	sbc	r25, r19
    1182:	83 5b       	subi	r24, 0xB3	; 179
    1184:	99 4e       	sbci	r25, 0xE9	; 233
    1186:	fc 01       	movw	r30, r24
    1188:	10 82       	st	Z, r1
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	84 36       	cpi	r24, 0x64	; 100
    1194:	20 f2       	brcs	.-120    	; 0x111e <nwkRouteInit+0xe>
    1196:	00 00       	nop
    1198:	0f 90       	pop	r0
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <NWK_RouteFindEntry>:
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <NWK_RouteFindEntry+0x6>
    11a6:	1f 92       	push	r1
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	6c 83       	std	Y+4, r22	; 0x04
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	42 c0       	rjmp	.+132    	; 0x123a <NWK_RouteFindEntry+0x9a>
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	c9 01       	movw	r24, r18
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	82 1b       	sub	r24, r18
    11cc:	93 0b       	sbc	r25, r19
    11ce:	87 5b       	subi	r24, 0xB7	; 183
    11d0:	99 4e       	sbci	r25, 0xE9	; 233
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 81       	ld	r18, Z
    11d6:	31 81       	ldd	r19, Z+1	; 0x01
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	9b 81       	ldd	r25, Y+3	; 0x03
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	49 f5       	brne	.+82     	; 0x1234 <NWK_RouteFindEntry+0x94>
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	c9 01       	movw	r24, r18
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	82 1b       	sub	r24, r18
    11f8:	93 0b       	sbc	r25, r19
    11fa:	88 5b       	subi	r24, 0xB8	; 184
    11fc:	99 4e       	sbci	r25, 0xE9	; 233
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	86 95       	lsr	r24
    1204:	81 70       	andi	r24, 0x01	; 1
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
    1214:	79 f4       	brne	.+30     	; 0x1234 <NWK_RouteFindEntry+0x94>
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	c9 01       	movw	r24, r18
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	82 1b       	sub	r24, r18
    122c:	93 0b       	sbc	r25, r19
    122e:	88 5b       	subi	r24, 0xB8	; 184
    1230:	99 4e       	sbci	r25, 0xE9	; 233
    1232:	09 c0       	rjmp	.+18     	; 0x1246 <NWK_RouteFindEntry+0xa6>
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	84 36       	cpi	r24, 0x64	; 100
    123e:	08 f4       	brcc	.+2      	; 0x1242 <NWK_RouteFindEntry+0xa2>
    1240:	ba cf       	rjmp	.-140    	; 0x11b6 <NWK_RouteFindEntry+0x16>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <NWK_RouteNewEntry>:
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	00 d0       	rcall	.+0      	; 0x125a <NWK_RouteNewEntry+0x6>
    125a:	1f 92       	push	r1
    125c:	1f 92       	push	r1
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	88 e4       	ldi	r24, 0x48	; 72
    1264:	96 e1       	ldi	r25, 0x16	; 22
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	1c 82       	std	Y+4, r1	; 0x04
    126c:	1b 82       	std	Y+3, r1	; 0x03
    126e:	1d 82       	std	Y+5, r1	; 0x05
    1270:	2e c0       	rjmp	.+92     	; 0x12ce <NWK_RouteNewEntry+0x7a>
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	fc 01       	movw	r30, r24
    1278:	80 81       	ld	r24, Z
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	88 23       	and	r24, r24
    127e:	f1 f4       	brne	.+60     	; 0x12bc <NWK_RouteNewEntry+0x68>
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	fc 01       	movw	r30, r24
    1286:	85 81       	ldd	r24, Z+5	; 0x05
    1288:	88 23       	and	r24, r24
    128a:	29 f4       	brne	.+10     	; 0x1296 <NWK_RouteNewEntry+0x42>
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	9c 83       	std	Y+4, r25	; 0x04
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	1f c0       	rjmp	.+62     	; 0x12d4 <NWK_RouteNewEntry+0x80>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	89 2b       	or	r24, r25
    129c:	51 f0       	breq	.+20     	; 0x12b2 <NWK_RouteNewEntry+0x5e>
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	fc 01       	movw	r30, r24
    12a4:	25 81       	ldd	r18, Z+5	; 0x05
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	fc 01       	movw	r30, r24
    12ac:	85 81       	ldd	r24, Z+5	; 0x05
    12ae:	28 17       	cp	r18, r24
    12b0:	30 f4       	brcc	.+12     	; 0x12be <NWK_RouteNewEntry+0x6a>
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <NWK_RouteNewEntry+0x6a>
    12bc:	00 00       	nop
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	07 96       	adiw	r24, 0x07	; 7
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	84 36       	cpi	r24, 0x64	; 100
    12d2:	78 f2       	brcs	.-98     	; 0x1272 <NWK_RouteNewEntry+0x1e>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	fc 01       	movw	r30, r24
    12da:	20 81       	ld	r18, Z
    12dc:	2d 7f       	andi	r18, 0xFD	; 253
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 81       	ld	r18, Z
    12ea:	2f 70       	andi	r18, 0x0F	; 15
    12ec:	20 63       	ori	r18, 0x30	; 48
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	20 e8       	ldi	r18, 0x80	; 128
    12f8:	fc 01       	movw	r30, r24
    12fa:	25 83       	std	Z+5, r18	; 0x05
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <NWK_RouteFreeEntry>:
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	1f 92       	push	r1
    1316:	1f 92       	push	r1
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	fc 01       	movw	r30, r24
    1326:	80 81       	ld	r24, Z
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	88 23       	and	r24, r24
    132c:	61 f4       	brne	.+24     	; 0x1346 <NWK_RouteFreeEntry+0x36>
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	fc 01       	movw	r30, r24
    1338:	32 83       	std	Z+2, r19	; 0x02
    133a:	21 83       	std	Z+1, r18	; 0x01
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	fc 01       	movw	r30, r24
    1342:	15 82       	std	Z+5, r1	; 0x05
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <NWK_RouteFreeEntry+0x38>
    1346:	00 00       	nop
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <NWK_RouteNextHop>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	00 d0       	rcall	.+0      	; 0x1358 <NWK_RouteNextHop+0x6>
    1358:	1f 92       	push	r1
    135a:	1f 92       	push	r1
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9c 83       	std	Y+4, r25	; 0x04
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	6d 83       	std	Y+5, r22	; 0x05
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	6d 81       	ldd	r22, Y+5	; 0x05
    136c:	19 df       	rcall	.-462    	; 0x11a0 <NWK_RouteFindEntry>
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	89 2b       	or	r24, r25
    1378:	31 f0       	breq	.+12     	; 0x1386 <NWK_RouteNextHop+0x34>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	fc 01       	movw	r30, r24
    1380:	83 81       	ldd	r24, Z+3	; 0x03
    1382:	94 81       	ldd	r25, Z+4	; 0x04
    1384:	02 c0       	rjmp	.+4      	; 0x138a <NWK_RouteNextHop+0x38>
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <nwkRouteRemove+0x6>
    13a0:	1f 92       	push	r1
    13a2:	1f 92       	push	r1
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	6d 83       	std	Y+5, r22	; 0x05
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	6d 81       	ldd	r22, Y+5	; 0x05
    13b4:	f5 de       	rcall	.-534    	; 0x11a0 <NWK_RouteFindEntry>
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	89 83       	std	Y+1, r24	; 0x01
  if (entry)
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	89 2b       	or	r24, r25
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <nwkRouteRemove+0x2e>
    NWK_RouteFreeEntry(entry);
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	a4 df       	rcall	.-184    	; 0x1310 <NWK_RouteFreeEntry>
}
    13c8:	00 00       	nop
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	27 97       	sbiw	r28, 0x07	; 7
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	9f 83       	std	Y+7, r25	; 0x07
    13f0:	8e 83       	std	Y+6, r24	; 0x06
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	9f 81       	ldd	r25, Y+7	; 0x07
    13f6:	02 96       	adiw	r24, 0x02	; 2
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	8b 83       	std	Y+3, r24	; 0x03
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	fc 01       	movw	r30, r24
    1402:	87 81       	ldd	r24, Z+7	; 0x07
    1404:	90 85       	ldd	r25, Z+8	; 0x08
    1406:	99 23       	and	r25, r25
    1408:	74 f4       	brge	.+28     	; 0x1426 <nwkRouteFrameReceived+0x4c>
      (header->macSrcAddr != header->nwkSrcAddr))
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	fc 01       	movw	r30, r24
    1410:	27 81       	ldd	r18, Z+7	; 0x07
    1412:	30 85       	ldd	r19, Z+8	; 0x08
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	fc 01       	movw	r30, r24
    141a:	83 85       	ldd	r24, Z+11	; 0x0b
    141c:	94 85       	ldd	r25, Z+12	; 0x0c
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    141e:	28 17       	cp	r18, r24
    1420:	39 07       	cpc	r19, r25
    1422:	09 f0       	breq	.+2      	; 0x1426 <nwkRouteFrameReceived+0x4c>
    1424:	83 c0       	rjmp	.+262    	; 0x152c <nwkRouteFrameReceived+0x152>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	fc 01       	movw	r30, r24
    142c:	83 81       	ldd	r24, Z+3	; 0x03
    142e:	94 81       	ldd	r25, Z+4	; 0x04
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	09 f4       	brne	.+2      	; 0x1436 <nwkRouteFrameReceived+0x5c>
    1434:	7d c0       	rjmp	.+250    	; 0x1530 <nwkRouteFrameReceived+0x156>
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	fc 01       	movw	r30, r24
    143c:	83 85       	ldd	r24, Z+11	; 0x0b
    143e:	94 85       	ldd	r25, Z+12	; 0x0c
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	ae de       	rcall	.-676    	; 0x11a0 <NWK_RouteFindEntry>
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01

  if (entry)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	89 2b       	or	r24, r25
    144e:	09 f4       	brne	.+2      	; 0x1452 <nwkRouteFrameReceived+0x78>
    1450:	4b c0       	rjmp	.+150    	; 0x14e8 <nwkRouteFrameReceived+0x10e>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	fc 01       	movw	r30, r24
    1458:	85 81       	ldd	r24, Z+5	; 0x05
    145a:	96 81       	ldd	r25, Z+6	; 0x06
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	79 f4       	brne	.+30     	; 0x147e <nwkRouteFrameReceived+0xa4>
        nwkIb.addr == header->nwkDstAddr);
    1460:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1464:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	fc 01       	movw	r30, r24
    146e:	85 85       	ldd	r24, Z+13	; 0x0d
    1470:	96 85       	ldd	r25, Z+14	; 0x0e

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	19 f4       	brne	.+6      	; 0x147e <nwkRouteFrameReceived+0xa4>
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <nwkRouteFrameReceived+0xa8>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	8d 83       	std	Y+5, r24	; 0x05
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	fc 01       	movw	r30, r24
    1490:	23 81       	ldd	r18, Z+3	; 0x03
    1492:	34 81       	ldd	r19, Z+4	; 0x04
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	fc 01       	movw	r30, r24
    149a:	87 81       	ldd	r24, Z+7	; 0x07
    149c:	90 85       	ldd	r25, Z+8	; 0x08
    149e:	28 17       	cp	r18, r24
    14a0:	39 07       	cpc	r19, r25
    14a2:	61 f0       	breq	.+24     	; 0x14bc <nwkRouteFrameReceived+0xe2>
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	8d 57       	subi	r24, 0x7D	; 125
    14aa:	9f 4f       	sbci	r25, 0xFF	; 255
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 81       	ld	r18, Z
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	fc 01       	movw	r30, r24
    14b6:	86 81       	ldd	r24, Z+6	; 0x06
    14b8:	82 17       	cp	r24, r18
    14ba:	18 f0       	brcs	.+6      	; 0x14c2 <nwkRouteFrameReceived+0xe8>
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	88 23       	and	r24, r24
    14c0:	51 f1       	breq	.+84     	; 0x1516 <nwkRouteFrameReceived+0x13c>
    {
      entry->nextHopAddr = header->macSrcAddr;
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	fc 01       	movw	r30, r24
    14c8:	27 81       	ldd	r18, Z+7	; 0x07
    14ca:	30 85       	ldd	r19, Z+8	; 0x08
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	fc 01       	movw	r30, r24
    14d2:	34 83       	std	Z+4, r19	; 0x04
    14d4:	23 83       	std	Z+3, r18	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	fc 01       	movw	r30, r24
    14dc:	20 81       	ld	r18, Z
    14de:	2f 70       	andi	r18, 0x0F	; 15
    14e0:	20 63       	ori	r18, 0x30	; 48
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    14e6:	17 c0       	rjmp	.+46     	; 0x1516 <nwkRouteFrameReceived+0x13c>
    14e8:	b5 de       	rcall	.-662    	; 0x1254 <NWK_RouteNewEntry>
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01

    entry->dstAddr = header->nwkSrcAddr;
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	fc 01       	movw	r30, r24
    14f4:	23 85       	ldd	r18, Z+11	; 0x0b
    14f6:	34 85       	ldd	r19, Z+12	; 0x0c
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	fc 01       	movw	r30, r24
    14fe:	32 83       	std	Z+2, r19	; 0x02
    1500:	21 83       	std	Z+1, r18	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	fc 01       	movw	r30, r24
    1508:	27 81       	ldd	r18, Z+7	; 0x07
    150a:	30 85       	ldd	r19, Z+8	; 0x08
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	fc 01       	movw	r30, r24
    1512:	34 83       	std	Z+4, r19	; 0x04
    1514:	23 83       	std	Z+3, r18	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	9f 81       	ldd	r25, Y+7	; 0x07
    151a:	8d 57       	subi	r24, 0x7D	; 125
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	fc 01       	movw	r30, r24
    1520:	20 81       	ld	r18, Z
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	fc 01       	movw	r30, r24
    1528:	26 83       	std	Z+6, r18	; 0x06
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <nwkRouteFrameReceived+0x158>
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
      (header->macSrcAddr != header->nwkSrcAddr))
    return;
    152c:	00 00       	nop
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <nwkRouteFrameReceived+0x158>

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    return;
    1530:	00 00       	nop

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    1532:	27 96       	adiw	r28, 0x07	; 7
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	00 d0       	rcall	.+0      	; 0x154a <nwkRouteFrameSent+0x6>
    154a:	1f 92       	push	r1
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	8b 83       	std	Y+3, r24	; 0x03
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	fc 01       	movw	r30, r24
    155a:	87 85       	ldd	r24, Z+15	; 0x0f
    155c:	90 89       	ldd	r25, Z+16	; 0x10
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	09 f4       	brne	.+2      	; 0x1564 <nwkRouteFrameSent+0x20>
    1562:	5f c0       	rjmp	.+190    	; 0x1622 <nwkRouteFrameSent+0xde>
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	fc 01       	movw	r30, r24
    156a:	83 85       	ldd	r24, Z+11	; 0x0b
    156c:	83 fb       	bst	r24, 3
    156e:	88 27       	eor	r24, r24
    1570:	80 f9       	bld	r24, 0
    1572:	28 2f       	mov	r18, r24
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	fc 01       	movw	r30, r24
    157a:	87 85       	ldd	r24, Z+15	; 0x0f
    157c:	90 89       	ldd	r25, Z+16	; 0x10
    157e:	62 2f       	mov	r22, r18
    1580:	0f de       	rcall	.-994    	; 0x11a0 <NWK_RouteFindEntry>
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01

  if (NULL == entry || entry->fixed)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	89 2b       	or	r24, r25
    158c:	09 f4       	brne	.+2      	; 0x1590 <nwkRouteFrameSent+0x4c>
    158e:	4b c0       	rjmp	.+150    	; 0x1626 <nwkRouteFrameSent+0xe2>
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	88 23       	and	r24, r24
    159c:	09 f0       	breq	.+2      	; 0x15a0 <nwkRouteFrameSent+0x5c>
    159e:	43 c0       	rjmp	.+134    	; 0x1626 <nwkRouteFrameSent+0xe2>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	8d 57       	subi	r24, 0x7D	; 125
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	88 23       	and	r24, r24
    15ae:	d1 f4       	brne	.+52     	; 0x15e4 <nwkRouteFrameSent+0xa0>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 81       	ld	r18, Z
    15b8:	2f 70       	andi	r18, 0x0F	; 15
    15ba:	20 63       	ori	r18, 0x30	; 48
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	fc 01       	movw	r30, r24
    15c6:	85 81       	ldd	r24, Z+5	; 0x05
    15c8:	21 e0       	ldi	r18, 0x01	; 1
    15ca:	28 0f       	add	r18, r24
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	fc 01       	movw	r30, r24
    15d2:	25 83       	std	Z+5, r18	; 0x05
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	fc 01       	movw	r30, r24
    15da:	85 81       	ldd	r24, Z+5	; 0x05
    15dc:	8f 3f       	cpi	r24, 0xFF	; 255
      nwkRouteNormalizeRanks();
    15de:	21 f5       	brne	.+72     	; 0x1628 <nwkRouteFrameSent+0xe4>
    15e0:	4f d1       	rcall	.+670    	; 0x1880 <nwkRouteNormalizeRanks>
    15e2:	22 c0       	rjmp	.+68     	; 0x1628 <nwkRouteFrameSent+0xe4>
  }
  else
  {
    if (0 == --entry->score)
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	fc 01       	movw	r30, r24
    15ea:	80 81       	ld	r24, Z
    15ec:	82 95       	swap	r24
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	2f e0       	ldi	r18, 0x0F	; 15
    15f2:	28 0f       	add	r18, r24
    15f4:	2f 70       	andi	r18, 0x0F	; 15
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	22 95       	swap	r18
    15fc:	20 7f       	andi	r18, 0xF0	; 240
    15fe:	fc 01       	movw	r30, r24
    1600:	30 81       	ld	r19, Z
    1602:	3f 70       	andi	r19, 0x0F	; 15
    1604:	23 2b       	or	r18, r19
    1606:	fc 01       	movw	r30, r24
    1608:	20 83       	st	Z, r18
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	fc 01       	movw	r30, r24
    1610:	80 81       	ld	r24, Z
    1612:	82 95       	swap	r24
    1614:	8f 70       	andi	r24, 0x0F	; 15
    1616:	88 23       	and	r24, r24
    1618:	39 f4       	brne	.+14     	; 0x1628 <nwkRouteFrameSent+0xe4>
      NWK_RouteFreeEntry(entry);
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	78 de       	rcall	.-784    	; 0x1310 <NWK_RouteFreeEntry>
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <nwkRouteFrameSent+0xe4>
void nwkRouteFrameSent(NwkFrame_t *frame)
{
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    return;
    1622:	00 00       	nop
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <nwkRouteFrameSent+0xe4>

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);

  if (NULL == entry || entry->fixed)
    return;
    1626:	00 00       	nop
  else
  {
    if (0 == --entry->score)
      NWK_RouteFreeEntry(entry);
  }
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	00 d0       	rcall	.+0      	; 0x163c <nwkRoutePrepareTx+0x6>
    163c:	1f 92       	push	r1
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	02 96       	adiw	r24, 0x02	; 2
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	fc 01       	movw	r30, r24
    1656:	85 85       	ldd	r24, Z+13	; 0x0d
    1658:	96 85       	ldd	r25, Z+14	; 0x0e
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	41 f4       	brne	.+16     	; 0x166e <nwkRoutePrepareTx+0x38>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	fc 01       	movw	r30, r24
    1668:	36 83       	std	Z+6, r19	; 0x06
    166a:	25 83       	std	Z+5, r18	; 0x05
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    166c:	27 c0       	rjmp	.+78     	; 0x16bc <nwkRoutePrepareTx+0x86>
  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
  }

  else if (header->nwkFcf.linkLocal)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	fc 01       	movw	r30, r24
    1674:	81 85       	ldd	r24, Z+9	; 0x09
    1676:	84 70       	andi	r24, 0x04	; 4
    1678:	88 23       	and	r24, r24
    167a:	59 f0       	breq	.+22     	; 0x1692 <nwkRoutePrepareTx+0x5c>
  {
    header->macDstAddr = header->nwkDstAddr;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	fc 01       	movw	r30, r24
    1682:	25 85       	ldd	r18, Z+13	; 0x0d
    1684:	36 85       	ldd	r19, Z+14	; 0x0e
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	fc 01       	movw	r30, r24
    168c:	36 83       	std	Z+6, r19	; 0x06
    168e:	25 83       	std	Z+5, r18	; 0x05
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1690:	15 c0       	rjmp	.+42     	; 0x16bc <nwkRoutePrepareTx+0x86>
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	fc 01       	movw	r30, r24
    1698:	81 85       	ldd	r24, Z+9	; 0x09
    169a:	83 fb       	bst	r24, 3
    169c:	88 27       	eor	r24, r24
    169e:	80 f9       	bld	r24, 0
    16a0:	28 2f       	mov	r18, r24
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	fc 01       	movw	r30, r24
    16a8:	85 85       	ldd	r24, Z+13	; 0x0d
    16aa:	96 85       	ldd	r25, Z+14	; 0x0e
    16ac:	62 2f       	mov	r22, r18
    16ae:	51 de       	rcall	.-862    	; 0x1352 <NWK_RouteNextHop>
    16b0:	9c 01       	movw	r18, r24
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	fc 01       	movw	r30, r24
    16b8:	36 83       	std	Z+6, r19	; 0x06
    16ba:	25 83       	std	Z+5, r18	; 0x05
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    16bc:	00 00       	nop
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	08 95       	ret

000016cc <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <nwkRouteFrame+0x6>
    16d2:	1f 92       	push	r1
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	02 96       	adiw	r24, 0x02	; 2
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	fc 01       	movw	r30, r24
    16ec:	81 85       	ldd	r24, Z+9	; 0x09
    16ee:	83 fb       	bst	r24, 3
    16f0:	88 27       	eor	r24, r24
    16f2:	80 f9       	bld	r24, 0
    16f4:	28 2f       	mov	r18, r24
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	fc 01       	movw	r30, r24
    16fc:	85 85       	ldd	r24, Z+13	; 0x0d
    16fe:	96 85       	ldd	r25, Z+14	; 0x0e
    1700:	62 2f       	mov	r22, r18
    1702:	27 de       	rcall	.-946    	; 0x1352 <NWK_RouteNextHop>
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	91 f0       	breq	.+36     	; 0x172c <nwkRouteFrame+0x60>
  {
    frame->tx.confirm = NULL;
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	89 57       	subi	r24, 0x79	; 121
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	fc 01       	movw	r30, r24
    1712:	11 82       	std	Z+1, r1	; 0x01
    1714:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	8a 57       	subi	r24, 0x7A	; 122
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	22 e0       	ldi	r18, 0x02	; 2
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
    nwkTxFrame(frame);
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	da d5       	rcall	.+2996   	; 0x22de <nwkTxFrame>
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
  }
}
    172a:	17 c0       	rjmp	.+46     	; 0x175a <nwkRouteFrame+0x8e>
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	fc 01       	movw	r30, r24
    1732:	81 85       	ldd	r24, Z+9	; 0x09
    1734:	83 fb       	bst	r24, 3
    1736:	88 27       	eor	r24, r24
    1738:	80 f9       	bld	r24, 0
    173a:	48 2f       	mov	r20, r24
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	fc 01       	movw	r30, r24
    1742:	25 85       	ldd	r18, Z+13	; 0x0d
    1744:	36 85       	ldd	r19, Z+14	; 0x0e
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	fc 01       	movw	r30, r24
    174c:	83 85       	ldd	r24, Z+11	; 0x0b
    174e:	94 85       	ldd	r25, Z+12	; 0x0c
    1750:	b9 01       	movw	r22, r18
    1752:	0b d0       	rcall	.+22     	; 0x176a <nwkRouteSendRouteError>
    nwkFrameFree(frame);
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	65 dc       	rcall	.-1846   	; 0x1024 <nwkFrameFree>
    175a:	00 00       	nop
  }
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <nwkRouteSendRouteError>:
    176a:	cf 93       	push	r28

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
    176c:	df 93       	push	r29
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	29 97       	sbiw	r28, 0x09	; 9
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
    1782:	78 87       	std	Y+8, r23	; 0x08
    1784:	6f 83       	std	Y+7, r22	; 0x07
    1786:	49 87       	std	Y+9, r20	; 0x09
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1788:	d8 db       	rcall	.-2128   	; 0xf3a <nwkFrameAlloc>
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	89 2b       	or	r24, r25
    1794:	09 f4       	brne	.+2      	; 0x1798 <nwkRouteSendRouteError+0x2e>
    1796:	40 c0       	rjmp	.+128    	; 0x1818 <nwkRouteSendRouteError+0xae>
    return;

  nwkFrameCommandInit(frame);
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	91 dc       	rcall	.-1758   	; 0x10c0 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	fc 01       	movw	r30, r24
    17a4:	81 81       	ldd	r24, Z+1	; 0x01
    17a6:	26 e0       	ldi	r18, 0x06	; 6
    17a8:	28 0f       	add	r18, r24
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	fc 01       	movw	r30, r24
    17b0:	21 83       	std	Z+1, r18	; 0x01
  frame->tx.confirm = NULL;
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	89 57       	subi	r24, 0x79	; 121
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	fc 01       	movw	r30, r24
    17bc:	11 82       	std	Z+1, r1	; 0x01
    17be:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	2d 81       	ldd	r18, Y+5	; 0x05
    17c6:	3e 81       	ldd	r19, Y+6	; 0x06
    17c8:	fc 01       	movw	r30, r24
    17ca:	30 8b       	std	Z+16, r19	; 0x10
    17cc:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	8f 57       	subi	r24, 0x7F	; 127
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	fc 01       	movw	r30, r24
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	8b 83       	std	Y+3, r24	; 0x03
  command->id = NWK_COMMAND_ROUTE_ERROR;
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18
  command->srcAddr = src;
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	2d 81       	ldd	r18, Y+5	; 0x05
    17f0:	3e 81       	ldd	r19, Y+6	; 0x06
    17f2:	fc 01       	movw	r30, r24
    17f4:	32 83       	std	Z+2, r19	; 0x02
    17f6:	21 83       	std	Z+1, r18	; 0x01
  command->dstAddr = dst;
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	2f 81       	ldd	r18, Y+7	; 0x07
    17fe:	38 85       	ldd	r19, Y+8	; 0x08
    1800:	fc 01       	movw	r30, r24
    1802:	34 83       	std	Z+4, r19	; 0x04
    1804:	23 83       	std	Z+3, r18	; 0x03
  command->multicast = multicast;
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	29 85       	ldd	r18, Y+9	; 0x09
    180c:	fc 01       	movw	r30, r24
    180e:	25 83       	std	Z+5, r18	; 0x05

  nwkTxFrame(frame);
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	64 d5       	rcall	.+2760   	; 0x22de <nwkTxFrame>
    1816:	01 c0       	rjmp	.+2      	; 0x181a <nwkRouteSendRouteError+0xb0>
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    return;
    1818:	00 00       	nop
  command->srcAddr = src;
  command->dstAddr = dst;
  command->multicast = multicast;

  nwkTxFrame(frame);
}
    181a:	29 96       	adiw	r28, 0x09	; 9
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	00 d0       	rcall	.+0      	; 0x1832 <nwkRouteErrorReceived+0x6>
    1832:	1f 92       	push	r1
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	8b 83       	std	Y+3, r24	; 0x03
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	fc 01       	movw	r30, r24
    1842:	87 81       	ldd	r24, Z+7	; 0x07
    1844:	90 85       	ldd	r25, Z+8	; 0x08
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	fc 01       	movw	r30, r24
    1850:	81 85       	ldd	r24, Z+9	; 0x09
    1852:	86 30       	cpi	r24, 0x06	; 6
    1854:	11 f0       	breq	.+4      	; 0x185a <nwkRouteErrorReceived+0x2e>
    return false;
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	0c c0       	rjmp	.+24     	; 0x1872 <nwkRouteErrorReceived+0x46>

  nwkRouteRemove(command->dstAddr, command->multicast);
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	fc 01       	movw	r30, r24
    1860:	25 81       	ldd	r18, Z+5	; 0x05
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	fc 01       	movw	r30, r24
    1868:	83 81       	ldd	r24, Z+3	; 0x03
    186a:	94 81       	ldd	r25, Z+4	; 0x04
    186c:	62 2f       	mov	r22, r18
    186e:	95 dd       	rcall	.-1238   	; 0x139a <nwkRouteRemove>

  return true;
    1870:	81 e0       	ldi	r24, 0x01	; 1
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <nwkRouteNormalizeRanks>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	1f 92       	push	r1
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    188a:	19 82       	std	Y+1, r1	; 0x01
    188c:	26 c0       	rjmp	.+76     	; 0x18da <nwkRouteNormalizeRanks+0x5a>
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	48 2f       	mov	r20, r24
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	ca 01       	movw	r24, r20
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	84 1b       	sub	r24, r20
    18aa:	95 0b       	sbc	r25, r21
    18ac:	83 5b       	subi	r24, 0xB3	; 179
    18ae:	99 4e       	sbci	r25, 0xE9	; 233
    18b0:	fc 01       	movw	r30, r24
    18b2:	80 81       	ld	r24, Z
    18b4:	86 95       	lsr	r24
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	48 0f       	add	r20, r24
    18ba:	c9 01       	movw	r24, r18
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	82 1b       	sub	r24, r18
    18ca:	93 0b       	sbc	r25, r19
    18cc:	83 5b       	subi	r24, 0xB3	; 179
    18ce:	99 4e       	sbci	r25, 0xE9	; 233
    18d0:	fc 01       	movw	r30, r24
    18d2:	40 83       	st	Z, r20

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	84 36       	cpi	r24, 0x64	; 100
    18de:	b8 f2       	brcs	.-82     	; 0x188e <nwkRouteNormalizeRanks+0xe>
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
}
    18e0:	00 00       	nop
    18e2:	0f 90       	pop	r0
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <nwkFramePayloadSize>:
/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
}
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	1f 92       	push	r1
    18f0:	1f 92       	push	r1
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	fc 01       	movw	r30, r24
    1900:	41 81       	ldd	r20, Z+1	; 0x01
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	8f 57       	subi	r24, 0x7F	; 127
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	9c 01       	movw	r18, r24
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	02 96       	adiw	r24, 0x02	; 2
    1918:	b9 01       	movw	r22, r18
    191a:	68 1b       	sub	r22, r24
    191c:	79 0b       	sbc	r23, r25
    191e:	cb 01       	movw	r24, r22
    1920:	74 2f       	mov	r23, r20
    1922:	78 1b       	sub	r23, r24
    1924:	87 2f       	mov	r24, r23
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret

00001930 <nwkRxInit>:
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	1f 92       	push	r1
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	19 82       	std	Y+1, r1	; 0x01
    193c:	11 c0       	rjmp	.+34     	; 0x1960 <nwkRxInit+0x30>
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	c9 01       	movw	r24, r18
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	82 0f       	add	r24, r18
    1950:	93 1f       	adc	r25, r19
    1952:	88 5f       	subi	r24, 0xF8	; 248
    1954:	96 4e       	sbci	r25, 0xE6	; 230
    1956:	fc 01       	movw	r30, r24
    1958:	10 82       	st	Z, r1
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	8a 30       	cpi	r24, 0x0A	; 10
    1964:	60 f3       	brcs	.-40     	; 0x193e <nwkRxInit+0xe>
    1966:	84 e6       	ldi	r24, 0x64	; 100
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e0       	ldi	r26, 0x00	; 0
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	80 93 3d 19 	sts	0x193D, r24	; 0x80193d <nwkRxDuplicateRejectionTimer+0x6>
    1972:	90 93 3e 19 	sts	0x193E, r25	; 0x80193e <nwkRxDuplicateRejectionTimer+0x7>
    1976:	a0 93 3f 19 	sts	0x193F, r26	; 0x80193f <nwkRxDuplicateRejectionTimer+0x8>
    197a:	b0 93 40 19 	sts	0x1940, r27	; 0x801940 <nwkRxDuplicateRejectionTimer+0x9>
    197e:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <nwkRxDuplicateRejectionTimer+0xa>
    1982:	88 ea       	ldi	r24, 0xA8	; 168
    1984:	9d e0       	ldi	r25, 0x0D	; 13
    1986:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <nwkRxDuplicateRejectionTimer+0xc>
    198a:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <nwkRxDuplicateRejectionTimer+0xb>
    198e:	64 ee       	ldi	r22, 0xE4	; 228
    1990:	7e e0       	ldi	r23, 0x0E	; 14
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	88 d8       	rcall	.-3824   	; 0xaa6 <NWK_OpenEndpoint>
    1996:	00 00       	nop
    1998:	0f 90       	pop	r0
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <PHY_DataInd>:
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <PHY_DataInd+0x6>
    19a6:	1f 92       	push	r1
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	fc 01       	movw	r30, r24
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	fc 01       	movw	r30, r24
    19be:	80 81       	ld	r24, Z
    19c0:	88 38       	cpi	r24, 0x88	; 136
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <PHY_DataInd+0x26>
    19c4:	53 c0       	rjmp	.+166    	; 0x1a6c <PHY_DataInd+0xcc>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	fc 01       	movw	r30, r24
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	81 36       	cpi	r24, 0x61	; 97
    19d6:	51 f0       	breq	.+20     	; 0x19ec <PHY_DataInd+0x4c>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	fc 01       	movw	r30, r24
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	fc 01       	movw	r30, r24
    19e4:	80 81       	ld	r24, Z
    19e6:	81 34       	cpi	r24, 0x41	; 65
    19e8:	09 f0       	breq	.+2      	; 0x19ec <PHY_DataInd+0x4c>
    19ea:	40 c0       	rjmp	.+128    	; 0x1a6c <PHY_DataInd+0xcc>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	fc 01       	movw	r30, r24
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	80 31       	cpi	r24, 0x10	; 16
    19f6:	d0 f1       	brcs	.+116    	; 0x1a6c <PHY_DataInd+0xcc>
    19f8:	a0 da       	rcall	.-2752   	; 0xf3a <nwkFrameAlloc>
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	89 2b       	or	r24, r25
    1a04:	a9 f1       	breq	.+106    	; 0x1a70 <PHY_DataInd+0xd0>
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	20 e2       	ldi	r18, 0x20	; 32
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	fc 01       	movw	r30, r24
    1a16:	22 81       	ldd	r18, Z+2	; 0x02
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	21 83       	std	Z+1, r18	; 0x01
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	fc 01       	movw	r30, r24
    1a26:	23 81       	ldd	r18, Z+3	; 0x03
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	8d 57       	subi	r24, 0x7D	; 125
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	fc 01       	movw	r30, r24
    1a3a:	24 81       	ldd	r18, Z+4	; 0x04
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	8c 57       	subi	r24, 0x7C	; 124
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	fc 01       	movw	r30, r24
    1a46:	20 83       	st	Z, r18
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	48 2f       	mov	r20, r24
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	fc 01       	movw	r30, r24
    1a5a:	20 81       	ld	r18, Z
    1a5c:	31 81       	ldd	r19, Z+1	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	02 96       	adiw	r24, 0x02	; 2
    1a64:	b9 01       	movw	r22, r18
    1a66:	0e 94 9e 19 	call	0x333c	; 0x333c <memcpy>
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <PHY_DataInd+0xd2>
    1a6c:	00 00       	nop
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <PHY_DataInd+0xd2>
    1a70:	00 00       	nop
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <nwkRxSendAck>:
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <nwkRxSendAck+0x6>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <nwkRxSendAck+0x8>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	54 da       	rcall	.-2904   	; 0xf3a <nwkFrameAlloc>
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	89 2b       	or	r24, r25
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <nwkRxSendAck+0x20>
    1a9e:	4e c0       	rjmp	.+156    	; 0x1b3c <nwkRxSendAck+0xbc>
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	0d db       	rcall	.-2534   	; 0x10c0 <nwkFrameCommandInit>
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	fc 01       	movw	r30, r24
    1aac:	81 81       	ldd	r24, Z+1	; 0x01
    1aae:	23 e0       	ldi	r18, 0x03	; 3
    1ab0:	28 0f       	add	r18, r24
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	21 83       	std	Z+1, r18	; 0x01
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	89 57       	subi	r24, 0x79	; 121
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	11 82       	std	Z+1, r1	; 0x01
    1ac6:	10 82       	st	Z, r1
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	fc 01       	movw	r30, r24
    1ace:	83 85       	ldd	r24, Z+11	; 0x0b
    1ad0:	81 fb       	bst	r24, 1
    1ad2:	22 27       	eor	r18, r18
    1ad4:	20 f9       	bld	r18, 0
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	21 70       	andi	r18, 0x01	; 1
    1adc:	22 0f       	add	r18, r18
    1ade:	fc 01       	movw	r30, r24
    1ae0:	33 85       	ldd	r19, Z+11	; 0x0b
    1ae2:	3d 7f       	andi	r19, 0xFD	; 253
    1ae4:	23 2b       	or	r18, r19
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	23 87       	std	Z+11, r18	; 0x0b
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	fc 01       	movw	r30, r24
    1af0:	25 85       	ldd	r18, Z+13	; 0x0d
    1af2:	36 85       	ldd	r19, Z+14	; 0x0e
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	fc 01       	movw	r30, r24
    1afa:	30 8b       	std	Z+16, r19	; 0x10
    1afc:	27 87       	std	Z+15, r18	; 0x0f
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	8f 57       	subi	r24, 0x7F	; 127
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	fc 01       	movw	r30, r24
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	fc 01       	movw	r30, r24
    1b16:	10 82       	st	Z, r1
    1b18:	20 91 36 19 	lds	r18, 0x1936	; 0x801936 <nwkRxAckControl>
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	fc 01       	movw	r30, r24
    1b22:	22 83       	std	Z+2, r18	; 0x02
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	fc 01       	movw	r30, r24
    1b2a:	24 85       	ldd	r18, Z+12	; 0x0c
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	fc 01       	movw	r30, r24
    1b32:	21 83       	std	Z+1, r18	; 0x01
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	d2 d3       	rcall	.+1956   	; 0x22de <nwkTxFrame>
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <nwkRxSendAck+0xbe>
    1b3c:	00 00       	nop
    1b3e:	26 96       	adiw	r28, 0x06	; 6
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <nwkRxDuplicateRejectionTimerHandler+0x6>
    1b56:	1f 92       	push	r1
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
  bool restart = false;
    1b60:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1b62:	1a 82       	std	Y+2, r1	; 0x02
    1b64:	30 c0       	rjmp	.+96     	; 0x1bc6 <nwkRxDuplicateRejectionTimerHandler+0x76>
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	82 0f       	add	r24, r18
    1b78:	93 1f       	adc	r25, r19
    1b7a:	88 5f       	subi	r24, 0xF8	; 248
    1b7c:	96 4e       	sbci	r25, 0xE6	; 230
    1b7e:	fc 01       	movw	r30, r24
    1b80:	80 81       	ld	r24, Z
    1b82:	88 23       	and	r24, r24
    1b84:	e9 f0       	breq	.+58     	; 0x1bc0 <nwkRxDuplicateRejectionTimerHandler+0x70>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	c9 01       	movw	r24, r18
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	82 0f       	add	r24, r18
    1b98:	93 1f       	adc	r25, r19
    1b9a:	88 5f       	subi	r24, 0xF8	; 248
    1b9c:	96 4e       	sbci	r25, 0xE6	; 230
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	80 81       	ld	r24, Z
    1ba2:	4f ef       	ldi	r20, 0xFF	; 255
    1ba4:	48 0f       	add	r20, r24
    1ba6:	c9 01       	movw	r24, r18
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	82 0f       	add	r24, r18
    1bb2:	93 1f       	adc	r25, r19
    1bb4:	88 5f       	subi	r24, 0xF8	; 248
    1bb6:	96 4e       	sbci	r25, 0xE6	; 230
    1bb8:	fc 01       	movw	r30, r24
    1bba:	40 83       	st	Z, r20
      restart = true;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	8a 30       	cpi	r24, 0x0A	; 10
    1bca:	68 f2       	brcs	.-102    	; 0x1b66 <nwkRxDuplicateRejectionTimerHandler+0x16>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	88 23       	and	r24, r24
    1bd0:	21 f0       	breq	.+8      	; 0x1bda <nwkRxDuplicateRejectionTimerHandler+0x8a>
    SYS_TimerStart(timer);
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <SYS_TimerStart>
}
    1bda:	00 00       	nop
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <nwkRxRejectDuplicate>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	29 97       	sbiw	r28, 0x09	; 9
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	99 87       	std	Y+9, r25	; 0x09
    1c00:	88 87       	std	Y+8, r24	; 0x08
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1c02:	1a 82       	std	Y+2, r1	; 0x02
    1c04:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1c06:	1b 82       	std	Y+3, r1	; 0x03
    1c08:	ac c0       	rjmp	.+344    	; 0x1d62 <nwkRxRejectDuplicate+0x178>
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	c9 01       	movw	r24, r18
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	82 0f       	add	r24, r18
    1c1c:	93 1f       	adc	r25, r19
    1c1e:	8c 5f       	subi	r24, 0xFC	; 252
    1c20:	96 4e       	sbci	r25, 0xE6	; 230
    1c22:	9d 83       	std	Y+5, r25	; 0x05
    1c24:	8c 83       	std	Y+4, r24	; 0x04

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	84 81       	ldd	r24, Z+4	; 0x04
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <nwkRxRejectDuplicate+0x4a>
    1c32:	8a c0       	rjmp	.+276    	; 0x1d48 <nwkRxRejectDuplicate+0x15e>
    1c34:	88 85       	ldd	r24, Y+8	; 0x08
    1c36:	99 85       	ldd	r25, Y+9	; 0x09
    1c38:	fc 01       	movw	r30, r24
    1c3a:	23 85       	ldd	r18, Z+11	; 0x0b
    1c3c:	34 85       	ldd	r19, Z+12	; 0x0c
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	9d 81       	ldd	r25, Y+5	; 0x05
    1c42:	fc 01       	movw	r30, r24
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	28 17       	cp	r18, r24
    1c4a:	39 07       	cpc	r19, r25
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <nwkRxRejectDuplicate+0x66>
    1c4e:	7c c0       	rjmp	.+248    	; 0x1d48 <nwkRxRejectDuplicate+0x15e>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	fc 01       	movw	r30, r24
    1c56:	22 81       	ldd	r18, Z+2	; 0x02
    1c58:	88 85       	ldd	r24, Y+8	; 0x08
    1c5a:	99 85       	ldd	r25, Y+9	; 0x09
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c60:	f2 2f       	mov	r31, r18
    1c62:	f8 1b       	sub	r31, r24
    1c64:	8f 2f       	mov	r24, r31
    1c66:	8e 83       	std	Y+6, r24	; 0x06

      if (diff < 8)
    1c68:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6a:	88 30       	cpi	r24, 0x08	; 8
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <nwkRxRejectDuplicate+0x86>
    1c6e:	46 c0       	rjmp	.+140    	; 0x1cfc <nwkRxRejectDuplicate+0x112>
      {
        if (entry->mask & (1 << diff))
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	fc 01       	movw	r30, r24
    1c76:	83 81       	ldd	r24, Z+3	; 0x03
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c7e:	22 2f       	mov	r18, r18
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <nwkRxRejectDuplicate+0x9e>
    1c84:	95 95       	asr	r25
    1c86:	87 95       	ror	r24
    1c88:	2a 95       	dec	r18
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <nwkRxRejectDuplicate+0x9a>
    1c8c:	81 70       	andi	r24, 0x01	; 1
    1c8e:	99 27       	eor	r25, r25
    1c90:	89 2b       	or	r24, r25
    1c92:	e9 f0       	breq	.+58     	; 0x1cce <nwkRxRejectDuplicate+0xe4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1c94:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1c98:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1c9c:	88 85       	ldd	r24, Y+8	; 0x08
    1c9e:	99 85       	ldd	r25, Y+9	; 0x09
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	85 81       	ldd	r24, Z+5	; 0x05
    1ca4:	96 81       	ldd	r25, Z+6	; 0x06
    1ca6:	28 17       	cp	r18, r24
    1ca8:	39 07       	cpc	r19, r25
    1caa:	79 f4       	brne	.+30     	; 0x1cca <nwkRxRejectDuplicate+0xe0>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1cac:	88 85       	ldd	r24, Y+8	; 0x08
    1cae:	99 85       	ldd	r25, Y+9	; 0x09
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	81 85       	ldd	r24, Z+9	; 0x09
    1cb4:	83 fb       	bst	r24, 3
    1cb6:	88 27       	eor	r24, r24
    1cb8:	80 f9       	bld	r24, 0
    1cba:	28 2f       	mov	r18, r24
    1cbc:	88 85       	ldd	r24, Y+8	; 0x08
    1cbe:	99 85       	ldd	r25, Y+9	; 0x09
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	85 85       	ldd	r24, Z+13	; 0x0d
    1cc4:	96 85       	ldd	r25, Z+14	; 0x0e
    1cc6:	62 2f       	mov	r22, r18
    1cc8:	68 db       	rcall	.-2352   	; 0x139a <nwkRouteRemove>
        #endif
          return true;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	74 c0       	rjmp	.+232    	; 0x1db6 <nwkRxRejectDuplicate+0x1cc>
        }

        entry->mask |= (1 << diff);
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	83 81       	ldd	r24, Z+3	; 0x03
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <nwkRxRejectDuplicate+0xfe>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	2a 95       	dec	r18
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <nwkRxRejectDuplicate+0xfa>
    1cec:	84 2b       	or	r24, r20
    1cee:	28 2f       	mov	r18, r24
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	23 83       	std	Z+3, r18	; 0x03
        return false;
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	5d c0       	rjmp	.+186    	; 0x1db6 <nwkRxRejectDuplicate+0x1cc>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    1cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfe:	81 95       	neg	r24
    1d00:	8f 83       	std	Y+7, r24	; 0x07

        entry->seq = header->nwkSeq;
    1d02:	88 85       	ldd	r24, Y+8	; 0x08
    1d04:	99 85       	ldd	r25, Y+9	; 0x09
    1d06:	fc 01       	movw	r30, r24
    1d08:	22 85       	ldd	r18, Z+10	; 0x0a
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	fc 01       	movw	r30, r24
    1d10:	22 83       	std	Z+2, r18	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	9d 81       	ldd	r25, Y+5	; 0x05
    1d16:	fc 01       	movw	r30, r24
    1d18:	83 81       	ldd	r24, Z+3	; 0x03
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d20:	22 2f       	mov	r18, r18
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <nwkRxRejectDuplicate+0x140>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	2a 95       	dec	r18
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <nwkRxRejectDuplicate+0x13c>
    1d2e:	81 60       	ori	r24, 0x01	; 1
    1d30:	28 2f       	mov	r18, r24
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	9d 81       	ldd	r25, Y+5	; 0x05
    1d36:	fc 01       	movw	r30, r24
    1d38:	23 83       	std	Z+3, r18	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	2f e1       	ldi	r18, 0x1F	; 31
    1d40:	fc 01       	movw	r30, r24
    1d42:	24 83       	std	Z+4, r18	; 0x04
        return false;
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	37 c0       	rjmp	.+110    	; 0x1db6 <nwkRxRejectDuplicate+0x1cc>
      }
    }

    if (0 == entry->ttl)
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	84 81       	ldd	r24, Z+4	; 0x04
    1d50:	88 23       	and	r24, r24
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <nwkRxRejectDuplicate+0x172>
      freeEntry = entry;
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	9d 81       	ldd	r25, Y+5	; 0x05
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	8a 30       	cpi	r24, 0x0A	; 10
    1d66:	08 f4       	brcc	.+2      	; 0x1d6a <nwkRxRejectDuplicate+0x180>
    1d68:	50 cf       	rjmp	.-352    	; 0x1c0a <nwkRxRejectDuplicate+0x20>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	89 2b       	or	r24, r25
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <nwkRxRejectDuplicate+0x18c>
    return true;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	20 c0       	rjmp	.+64     	; 0x1db6 <nwkRxRejectDuplicate+0x1cc>

  freeEntry->src = header->nwkSrcAddr;
    1d76:	88 85       	ldd	r24, Y+8	; 0x08
    1d78:	99 85       	ldd	r25, Y+9	; 0x09
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	23 85       	ldd	r18, Z+11	; 0x0b
    1d7e:	34 85       	ldd	r19, Z+12	; 0x0c
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	fc 01       	movw	r30, r24
    1d86:	31 83       	std	Z+1, r19	; 0x01
    1d88:	20 83       	st	Z, r18
  freeEntry->seq = header->nwkSeq;
    1d8a:	88 85       	ldd	r24, Y+8	; 0x08
    1d8c:	99 85       	ldd	r25, Y+9	; 0x09
    1d8e:	fc 01       	movw	r30, r24
    1d90:	22 85       	ldd	r18, Z+10	; 0x0a
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	fc 01       	movw	r30, r24
    1d98:	22 83       	std	Z+2, r18	; 0x02
  freeEntry->mask = 1;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	21 e0       	ldi	r18, 0x01	; 1
    1da0:	fc 01       	movw	r30, r24
    1da2:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	2f e1       	ldi	r18, 0x1F	; 31
    1daa:	fc 01       	movw	r30, r24
    1dac:	24 83       	std	Z+4, r18	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1dae:	87 e3       	ldi	r24, 0x37	; 55
    1db0:	99 e1       	ldi	r25, 0x19	; 25
    1db2:	f9 d7       	rcall	.+4082   	; 0x2da6 <SYS_TimerStart>

  return false;
    1db4:	80 e0       	ldi	r24, 0x00	; 0
}
    1db6:	29 96       	adiw	r28, 0x09	; 9
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	08 95       	ret

00001dc8 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxServiceDataInd(NWK_DataInd_t *ind)
{
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	1f 92       	push	r1
    1dce:	1f 92       	push	r1
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	fc 01       	movw	r30, r24
    1dde:	81 85       	ldd	r24, Z+9	; 0x09
    1de0:	88 23       	and	r24, r24
    1de2:	11 f4       	brne	.+4      	; 0x1de8 <nwkRxServiceDataInd+0x20>
    return false;
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	17 c0       	rjmp	.+46     	; 0x1e16 <nwkRxServiceDataInd+0x4e>

  switch (ind->data[0])
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	fc 01       	movw	r30, r24
    1dee:	87 81       	ldd	r24, Z+7	; 0x07
    1df0:	90 85       	ldd	r25, Z+8	; 0x08
    1df2:	fc 01       	movw	r30, r24
    1df4:	80 81       	ld	r24, Z
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	19 f0       	breq	.+6      	; 0x1e04 <nwkRxServiceDataInd+0x3c>
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <nwkRxServiceDataInd+0x44>
    1e02:	08 c0       	rjmp	.+16     	; 0x1e14 <nwkRxServiceDataInd+0x4c>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	98 d3       	rcall	.+1840   	; 0x253a <nwkTxAckReceived>
    1e0a:	05 c0       	rjmp	.+10     	; 0x1e16 <nwkRxServiceDataInd+0x4e>

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	0d dd       	rcall	.-1510   	; 0x182c <nwkRouteErrorReceived>
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <nwkRxServiceDataInd+0x4e>
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <nwkRxHandleReceivedFrame>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <nwkRxHandleReceivedFrame+0x6>
    1e26:	1f 92       	push	r1
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	9c 83       	std	Y+4, r25	; 0x04
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	02 96       	adiw	r24, 0x02	; 2
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01

  frame->state = NWK_RX_STATE_FINISH;
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	24 e2       	ldi	r18, 0x24	; 36
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	fc 01       	movw	r30, r24
    1e4a:	81 85       	ldd	r24, Z+9	; 0x09
    1e4c:	82 70       	andi	r24, 0x02	; 2
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <nwkRxHandleReceivedFrame+0x34>
    1e52:	96 c0       	rjmp	.+300    	; 0x1f80 <nwkRxHandleReceivedFrame+0x160>

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	fc 01       	movw	r30, r24
    1e5a:	81 85       	ldd	r24, Z+9	; 0x09
    1e5c:	88 70       	andi	r24, 0x08	; 8
    1e5e:	88 23       	and	r24, r24
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <nwkRxHandleReceivedFrame+0x44>
    1e62:	90 c0       	rjmp	.+288    	; 0x1f84 <nwkRxHandleReceivedFrame+0x164>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	fc 01       	movw	r30, r24
    1e6a:	83 81       	ldd	r24, Z+3	; 0x03
    1e6c:	94 81       	ldd	r25, Z+4	; 0x04
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	d1 f4       	brne	.+52     	; 0x1ea6 <nwkRxHandleReceivedFrame+0x86>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1e72:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1e76:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	fc 01       	movw	r30, r24
    1e80:	85 85       	ldd	r24, Z+13	; 0x0d
    1e82:	96 85       	ldd	r25, Z+14	; 0x0e
    1e84:	28 17       	cp	r18, r24
    1e86:	39 07       	cpc	r19, r25
    1e88:	41 f0       	breq	.+16     	; 0x1e9a <nwkRxHandleReceivedFrame+0x7a>
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	fc 01       	movw	r30, r24
    1e90:	85 85       	ldd	r24, Z+13	; 0x0d
    1e92:	96 85       	ldd	r25, Z+14	; 0x0e
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <nwkRxHandleReceivedFrame+0x7a>
    1e98:	77 c0       	rjmp	.+238    	; 0x1f88 <nwkRxHandleReceivedFrame+0x168>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	22 e2       	ldi	r18, 0x22	; 34
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	20 83       	st	Z, r18
    }
    return;
    1ea4:	71 c0       	rjmp	.+226    	; 0x1f88 <nwkRxHandleReceivedFrame+0x168>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	fc 01       	movw	r30, r24
    1eac:	85 85       	ldd	r24, Z+13	; 0x0d
    1eae:	96 85       	ldd	r25, Z+14	; 0x0e
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	41 f4       	brne	.+16     	; 0x1ec4 <nwkRxHandleReceivedFrame+0xa4>
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	fc 01       	movw	r30, r24
    1eba:	81 85       	ldd	r24, Z+9	; 0x09
    1ebc:	81 70       	andi	r24, 0x01	; 1
    1ebe:	88 23       	and	r24, r24
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <nwkRxHandleReceivedFrame+0xa4>
    1ec2:	64 c0       	rjmp	.+200    	; 0x1f8c <nwkRxHandleReceivedFrame+0x16c>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1ec4:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1ec8:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	83 85       	ldd	r24, Z+11	; 0x0b
    1ed4:	94 85       	ldd	r25, Z+12	; 0x0c
    1ed6:	28 17       	cp	r18, r24
    1ed8:	39 07       	cpc	r19, r25
    1eda:	09 f4       	brne	.+2      	; 0x1ede <nwkRxHandleReceivedFrame+0xbe>
    1edc:	59 c0       	rjmp	.+178    	; 0x1f90 <nwkRxHandleReceivedFrame+0x170>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	7b da       	rcall	.-2826   	; 0x13da <nwkRouteFrameReceived>
#endif

  if (nwkRxRejectDuplicate(header))
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	80 de       	rcall	.-768    	; 0x1bea <nwkRxRejectDuplicate>
    1eea:	88 23       	and	r24, r24
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <nwkRxHandleReceivedFrame+0xd0>
    1eee:	52 c0       	rjmp	.+164    	; 0x1f94 <nwkRxHandleReceivedFrame+0x174>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	85 81       	ldd	r24, Z+5	; 0x05
    1ef8:	96 81       	ldd	r25, Z+6	; 0x06
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	b1 f4       	brne	.+44     	; 0x1f2a <nwkRxHandleReceivedFrame+0x10a>
    1efe:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1f02:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	85 85       	ldd	r24, Z+13	; 0x0d
    1f0e:	96 85       	ldd	r25, Z+14	; 0x0e
    1f10:	28 17       	cp	r18, r24
    1f12:	39 07       	cpc	r19, r25
    1f14:	51 f0       	breq	.+20     	; 0x1f2a <nwkRxHandleReceivedFrame+0x10a>
        0 == header->nwkFcf.linkLocal)
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	81 85       	ldd	r24, Z+9	; 0x09
    1f1e:	84 70       	andi	r24, 0x04	; 4
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1f20:	88 23       	and	r24, r24
    1f22:	19 f4       	brne	.+6      	; 0x1f2a <nwkRxHandleReceivedFrame+0x10a>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	8c d2       	rcall	.+1304   	; 0x2442 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1f2a:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1f2e:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	fc 01       	movw	r30, r24
    1f38:	85 85       	ldd	r24, Z+13	; 0x0d
    1f3a:	96 85       	ldd	r25, Z+14	; 0x0e
    1f3c:	28 17       	cp	r18, r24
    1f3e:	39 07       	cpc	r19, r25
    1f40:	39 f0       	breq	.+14     	; 0x1f50 <nwkRxHandleReceivedFrame+0x130>
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	fc 01       	movw	r30, r24
    1f48:	85 85       	ldd	r24, Z+13	; 0x0d
    1f4a:	96 85       	ldd	r25, Z+14	; 0x0e
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	31 f4       	brne	.+12     	; 0x1f5c <nwkRxHandleReceivedFrame+0x13c>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	22 e2       	ldi	r18, 0x22	; 34
    1f56:	fc 01       	movw	r30, r24
    1f58:	20 83       	st	Z, r18
    1f5a:	1d c0       	rjmp	.+58     	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1f5c:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    1f60:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	fc 01       	movw	r30, r24
    1f6a:	85 81       	ldd	r24, Z+5	; 0x05
    1f6c:	96 81       	ldd	r25, Z+6	; 0x06
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	89 f4       	brne	.+34     	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	23 e2       	ldi	r18, 0x23	; 35
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	20 83       	st	Z, r18
    1f7e:	0b c0       	rjmp	.+22     	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>

  frame->state = NWK_RX_STATE_FINISH;

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    return;
    1f80:	00 00       	nop
    1f82:	09 c0       	rjmp	.+18     	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>
#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    return;
    1f84:	00 00       	nop
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    }
    return;
    1f88:	00 00       	nop
    1f8a:	05 c0       	rjmp	.+10     	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;
    1f8c:	00 00       	nop
    1f8e:	03 c0       	rjmp	.+6      	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>

  if (nwkIb.addr == header->nwkSrcAddr)
    return;
    1f90:	00 00       	nop
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <nwkRxHandleReceivedFrame+0x176>
#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
#endif

  if (nwkRxRejectDuplicate(header))
    return;
    1f94:	00 00       	nop
    {
      frame->state = NWK_RX_STATE_ROUTE;
    }
  #endif
  }
}
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	08 95       	ret

00001fa4 <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	60 97       	sbiw	r28, 0x10	; 16
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	98 8b       	std	Y+16, r25	; 0x10
    1fba:	8f 87       	std	Y+15, r24	; 0x0f
  NwkFrameHeader_t *header = &frame->header;
    1fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbe:	98 89       	ldd	r25, Y+16	; 0x10
    1fc0:	02 96       	adiw	r24, 0x02	; 2
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	fc 01       	movw	r30, r24
    1fcc:	87 85       	ldd	r24, Z+15	; 0x0f
    1fce:	82 95       	swap	r24
    1fd0:	8f 70       	andi	r24, 0x0F	; 15
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	03 96       	adiw	r24, 0x03	; 3
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	89 51       	subi	r24, 0x19	; 25
    1fde:	96 4e       	sbci	r25, 0xE6	; 230
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	89 2b       	or	r24, r25
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <nwkRxIndicateFrame+0x4a>
    return false;
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	aa c0       	rjmp	.+340    	; 0x2142 <__EEPROM_REGION_LENGTH__+0x142>

  ind.srcAddr = header->nwkSrcAddr;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ff6:	94 85       	ldd	r25, Z+12	; 0x0c
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
  ind.dstAddr = header->nwkDstAddr;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	fc 01       	movw	r30, r24
    2002:	85 85       	ldd	r24, Z+13	; 0x0d
    2004:	96 85       	ldd	r25, Z+14	; 0x0e
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
  ind.srcEndpoint = header->nwkSrcEndpoint;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	fc 01       	movw	r30, r24
    2010:	87 85       	ldd	r24, Z+15	; 0x0f
    2012:	8f 70       	andi	r24, 0x0F	; 15
    2014:	8f 83       	std	Y+7, r24	; 0x07
  ind.dstEndpoint = header->nwkDstEndpoint;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	fc 01       	movw	r30, r24
    201c:	87 85       	ldd	r24, Z+15	; 0x0f
    201e:	82 95       	swap	r24
    2020:	8f 70       	andi	r24, 0x0F	; 15
    2022:	88 87       	std	Y+8, r24	; 0x08
  ind.data = frame->payload;
    2024:	8f 85       	ldd	r24, Y+15	; 0x0f
    2026:	98 89       	ldd	r25, Y+16	; 0x10
    2028:	8f 57       	subi	r24, 0x7F	; 127
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	fc 01       	movw	r30, r24
    202e:	80 81       	ld	r24, Z
    2030:	91 81       	ldd	r25, Z+1	; 0x01
    2032:	9b 87       	std	Y+11, r25	; 0x0b
    2034:	8a 87       	std	Y+10, r24	; 0x0a
  ind.size = nwkFramePayloadSize(frame);
    2036:	8f 85       	ldd	r24, Y+15	; 0x0f
    2038:	98 89       	ldd	r25, Y+16	; 0x10
    203a:	57 dc       	rcall	.-1874   	; 0x18ea <nwkFramePayloadSize>
    203c:	8c 87       	std	Y+12, r24	; 0x0c
  ind.lqi = frame->rx.lqi;
    203e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2040:	98 89       	ldd	r25, Y+16	; 0x10
    2042:	8d 57       	subi	r24, 0x7D	; 125
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	fc 01       	movw	r30, r24
    2048:	80 81       	ld	r24, Z
    204a:	8d 87       	std	Y+13, r24	; 0x0d
  ind.rssi = frame->rx.rssi;
    204c:	8f 85       	ldd	r24, Y+15	; 0x0f
    204e:	98 89       	ldd	r25, Y+16	; 0x10
    2050:	8c 57       	subi	r24, 0x7C	; 124
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	fc 01       	movw	r30, r24
    2056:	80 81       	ld	r24, Z
    2058:	8e 87       	std	Y+14, r24	; 0x0e

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	fc 01       	movw	r30, r24
    2060:	81 85       	ldd	r24, Z+9	; 0x09
    2062:	98 2f       	mov	r25, r24
    2064:	91 70       	andi	r25, 0x01	; 1
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	99 23       	and	r25, r25
    206a:	09 f4       	brne	.+2      	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	28 2f       	mov	r18, r24
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	fc 01       	movw	r30, r24
    207a:	81 85       	ldd	r24, Z+9	; 0x09
    207c:	82 70       	andi	r24, 0x02	; 2
    207e:	82 2b       	or	r24, r18
    2080:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	28 2f       	mov	r18, r24
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	fc 01       	movw	r30, r24
    208c:	81 85       	ldd	r24, Z+9	; 0x09
    208e:	84 70       	andi	r24, 0x04	; 4
    2090:	88 23       	and	r24, r24
    2092:	11 f0       	breq	.+4      	; 0x2098 <__EEPROM_REGION_LENGTH__+0x98>
    2094:	80 e2       	ldi	r24, 0x20	; 32
    2096:	01 c0       	rjmp	.+2      	; 0x209a <__EEPROM_REGION_LENGTH__+0x9a>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	82 2b       	or	r24, r18
    209c:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    209e:	89 85       	ldd	r24, Y+9	; 0x09
    20a0:	28 2f       	mov	r18, r24
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	fc 01       	movw	r30, r24
    20a8:	81 85       	ldd	r24, Z+9	; 0x09
    20aa:	88 70       	andi	r24, 0x08	; 8
    20ac:	88 23       	and	r24, r24
    20ae:	11 f0       	breq	.+4      	; 0x20b4 <__EEPROM_REGION_LENGTH__+0xb4>
    20b0:	80 e4       	ldi	r24, 0x40	; 64
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <__EEPROM_REGION_LENGTH__+0xb6>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	82 2b       	or	r24, r18
    20b8:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	28 2f       	mov	r18, r24
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	fc 01       	movw	r30, r24
    20c4:	85 85       	ldd	r24, Z+13	; 0x0d
    20c6:	96 85       	ldd	r25, Z+14	; 0x0e
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <__EEPROM_REGION_LENGTH__+0xd0>
    20cc:	84 e0       	ldi	r24, 0x04	; 4
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <__EEPROM_REGION_LENGTH__+0xd2>
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	82 2b       	or	r24, r18
    20d4:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	48 2f       	mov	r20, r24
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	fc 01       	movw	r30, r24
    20e0:	23 85       	ldd	r18, Z+11	; 0x0b
    20e2:	34 85       	ldd	r19, Z+12	; 0x0c
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	fc 01       	movw	r30, r24
    20ea:	87 81       	ldd	r24, Z+7	; 0x07
    20ec:	90 85       	ldd	r25, Z+8	; 0x08
    20ee:	28 17       	cp	r18, r24
    20f0:	39 07       	cpc	r19, r25
    20f2:	11 f4       	brne	.+4      	; 0x20f8 <__EEPROM_REGION_LENGTH__+0xf8>
    20f4:	88 e0       	ldi	r24, 0x08	; 8
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <__EEPROM_REGION_LENGTH__+0xfa>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	84 2b       	or	r24, r20
    20fc:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    20fe:	89 85       	ldd	r24, Y+9	; 0x09
    2100:	28 2f       	mov	r18, r24
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	fc 01       	movw	r30, r24
    2108:	83 81       	ldd	r24, Z+3	; 0x03
    210a:	94 81       	ldd	r25, Z+4	; 0x04
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	11 f4       	brne	.+4      	; 0x2114 <__EEPROM_REGION_LENGTH__+0x114>
    2110:	80 e1       	ldi	r24, 0x10	; 16
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <__EEPROM_REGION_LENGTH__+0x116>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	82 2b       	or	r24, r18
    2118:	89 87       	std	Y+9, r24	; 0x09

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	fc 01       	movw	r30, r24
    2120:	87 85       	ldd	r24, Z+15	; 0x0f
    2122:	82 95       	swap	r24
    2124:	8f 70       	andi	r24, 0x0F	; 15
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	03 96       	adiw	r24, 0x03	; 3
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	89 51       	subi	r24, 0x19	; 25
    2132:	96 4e       	sbci	r25, 0xE6	; 230
    2134:	fc 01       	movw	r30, r24
    2136:	20 81       	ld	r18, Z
    2138:	31 81       	ldd	r19, Z+1	; 0x01
    213a:	ce 01       	movw	r24, r28
    213c:	03 96       	adiw	r24, 0x03	; 3
    213e:	f9 01       	movw	r30, r18
    2140:	19 95       	eicall
}
    2142:	60 96       	adiw	r28, 0x10	; 16
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	08 95       	ret

00002154 <nwkRxHandleIndication>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	00 d0       	rcall	.+0      	; 0x215a <nwkRxHandleIndication+0x6>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	9b 83       	std	Y+3, r25	; 0x03
    2160:	8a 83       	std	Y+2, r24	; 0x02
  bool ack;

  nwkRxAckControl = 0;
    2162:	10 92 36 19 	sts	0x1936, r1	; 0x801936 <nwkRxAckControl>
  ack = nwkRxIndicateFrame(frame);
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	1c df       	rcall	.-456    	; 0x1fa4 <nwkRxIndicateFrame>
    216c:	89 83       	std	Y+1, r24	; 0x01
  
  if (0 == frame->header.nwkFcf.ackRequest)
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	fc 01       	movw	r30, r24
    2174:	83 85       	ldd	r24, Z+11	; 0x0b
    2176:	81 70       	andi	r24, 0x01	; 1
    2178:	88 23       	and	r24, r24
    217a:	09 f4       	brne	.+2      	; 0x217e <nwkRxHandleIndication+0x2a>
    ack = false;
    217c:	19 82       	std	Y+1, r1	; 0x01

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	fc 01       	movw	r30, r24
    2184:	87 81       	ldd	r24, Z+7	; 0x07
    2186:	90 85       	ldd	r25, Z+8	; 0x08
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	a9 f4       	brne	.+42     	; 0x21b6 <nwkRxHandleIndication+0x62>
      nwkIb.addr == frame->header.nwkDstAddr &&
    218c:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    2190:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	9b 81       	ldd	r25, Y+3	; 0x03
    2198:	fc 01       	movw	r30, r24
    219a:	87 85       	ldd	r24, Z+15	; 0x0f
    219c:	90 89       	ldd	r25, Z+16	; 0x10
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    219e:	28 17       	cp	r18, r24
    21a0:	39 07       	cpc	r19, r25
    21a2:	49 f4       	brne	.+18     	; 0x21b6 <nwkRxHandleIndication+0x62>
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	fc 01       	movw	r30, r24
    21aa:	83 85       	ldd	r24, Z+11	; 0x0b
    21ac:	88 70       	andi	r24, 0x08	; 8
  
  if (0 == frame->header.nwkFcf.ackRequest)
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
    21ae:	88 23       	and	r24, r24
    21b0:	11 f4       	brne	.+4      	; 0x21b6 <nwkRxHandleIndication+0x62>
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	fc 01       	movw	r30, r24
    21bc:	85 81       	ldd	r24, Z+5	; 0x05
    21be:	96 81       	ldd	r25, Z+6	; 0x06
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <nwkRxHandleIndication+0x72>
    ack = false;
    21c4:	19 82       	std	Y+1, r1	; 0x01

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    21c6:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <nwkIb>
    21ca:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <nwkRxHandleIndication+0x80>
    ack = false;
    21d2:	19 82       	std	Y+1, r1	; 0x01

  if (ack)
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	88 23       	and	r24, r24
    21d8:	19 f0       	breq	.+6      	; 0x21e0 <nwkRxHandleIndication+0x8c>
    nwkRxSendAck(frame);
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	50 dc       	rcall	.-1888   	; 0x1a80 <nwkRxSendAck>

  frame->state = NWK_RX_STATE_FINISH;
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	24 e2       	ldi	r18, 0x24	; 36
    21e6:	fc 01       	movw	r30, r24
    21e8:	20 83       	st	Z, r18
}
    21ea:	00 00       	nop
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret

000021f8 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	1f 92       	push	r1
    21fe:	1f 92       	push	r1
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
  NwkFrame_t *frame = NULL;
    2204:	1a 82       	std	Y+2, r1	; 0x02
    2206:	19 82       	std	Y+1, r1	; 0x01

  while (NULL != (frame = nwkFrameNext(frame)))
    2208:	26 c0       	rjmp	.+76     	; 0x2256 <nwkRxTaskHandler+0x5e>
  {
    switch (frame->state)
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	fc 01       	movw	r30, r24
    2210:	80 81       	ld	r24, Z
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	82 32       	cpi	r24, 0x22	; 34
    2218:	91 05       	cpc	r25, r1
    221a:	81 f0       	breq	.+32     	; 0x223c <nwkRxTaskHandler+0x44>
    221c:	83 32       	cpi	r24, 0x23	; 35
    221e:	91 05       	cpc	r25, r1
    2220:	1c f4       	brge	.+6      	; 0x2228 <nwkRxTaskHandler+0x30>
    2222:	80 97       	sbiw	r24, 0x20	; 32
    2224:	39 f0       	breq	.+14     	; 0x2234 <nwkRxTaskHandler+0x3c>
    2226:	17 c0       	rjmp	.+46     	; 0x2256 <nwkRxTaskHandler+0x5e>
    2228:	83 32       	cpi	r24, 0x23	; 35
    222a:	91 05       	cpc	r25, r1
    222c:	59 f0       	breq	.+22     	; 0x2244 <nwkRxTaskHandler+0x4c>
    222e:	84 97       	sbiw	r24, 0x24	; 36
    2230:	69 f0       	breq	.+26     	; 0x224c <nwkRxTaskHandler+0x54>
    2232:	11 c0       	rjmp	.+34     	; 0x2256 <nwkRxTaskHandler+0x5e>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	f3 dd       	rcall	.-1050   	; 0x1e20 <nwkRxHandleReceivedFrame>
      } break;
    223a:	0d c0       	rjmp	.+26     	; 0x2256 <nwkRxTaskHandler+0x5e>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	89 df       	rcall	.-238    	; 0x2154 <nwkRxHandleIndication>
      } break;
    2242:	09 c0       	rjmp	.+18     	; 0x2256 <nwkRxTaskHandler+0x5e>

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	41 da       	rcall	.-2942   	; 0x16cc <nwkRouteFrame>
      } break;
    224a:	05 c0       	rjmp	.+10     	; 0x2256 <nwkRxTaskHandler+0x5e>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	0e 94 12 08 	call	0x1024	; 0x1024 <nwkFrameFree>
      } break;
    2254:	00 00       	nop
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	0e 94 2d 08 	call	0x105a	; 0x105a <nwkFrameNext>
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	89 2b       	or	r24, r25
    2268:	81 f6       	brne	.-96     	; 0x220a <nwkRxTaskHandler+0x12>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    226a:	00 00       	nop
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <nwkTxInit>:

/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
  nwkTxPhyActiveFrame = NULL;
    227e:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    2282:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <nwkTxPhyActiveFrame>

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2286:	82 e3       	ldi	r24, 0x32	; 50
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <nwkTxAckWaitTimer+0x6>
    2292:	90 93 4d 19 	sts	0x194D, r25	; 0x80194d <nwkTxAckWaitTimer+0x7>
    2296:	a0 93 4e 19 	sts	0x194E, r26	; 0x80194e <nwkTxAckWaitTimer+0x8>
    229a:	b0 93 4f 19 	sts	0x194F, r27	; 0x80194f <nwkTxAckWaitTimer+0x9>
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    229e:	10 92 50 19 	sts	0x1950, r1	; 0x801950 <nwkTxAckWaitTimer+0xa>
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    22a2:	8b ee       	ldi	r24, 0xEB	; 235
    22a4:	92 e1       	ldi	r25, 0x12	; 18
    22a6:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <nwkTxAckWaitTimer+0xc>
    22aa:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <nwkTxAckWaitTimer+0xb>

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    22ae:	8a e0       	ldi	r24, 0x0A	; 10
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <nwkTxDelayTimer+0x6>
    22ba:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <nwkTxDelayTimer+0x7>
    22be:	a0 93 5b 19 	sts	0x195B, r26	; 0x80195b <nwkTxDelayTimer+0x8>
    22c2:	b0 93 5c 19 	sts	0x195C, r27	; 0x80195c <nwkTxDelayTimer+0x9>
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    22c6:	10 92 5d 19 	sts	0x195D, r1	; 0x80195d <nwkTxDelayTimer+0xa>
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    22ca:	82 e5       	ldi	r24, 0x52	; 82
    22cc:	93 e1       	ldi	r25, 0x13	; 19
    22ce:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <nwkTxDelayTimer+0xc>
    22d2:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <nwkTxDelayTimer+0xb>
}
    22d6:	00 00       	nop
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <nwkTxFrame+0x6>
    22e4:	1f 92       	push	r1
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	9c 83       	std	Y+4, r25	; 0x04
    22ec:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	02 96       	adiw	r24, 0x02	; 2
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	8a 57       	subi	r24, 0x7A	; 122
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	fc 01       	movw	r30, r24
    2302:	80 81       	ld	r24, Z
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	82 70       	andi	r24, 0x02	; 2
    230a:	99 27       	eor	r25, r25
    230c:	89 2b       	or	r24, r25
    230e:	31 f0       	breq	.+12     	; 0x231c <nwkTxFrame+0x3e>
  {
    frame->state = NWK_TX_STATE_DELAY;
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	22 e1       	ldi	r18, 0x12	; 18
    2316:	fc 01       	movw	r30, r24
    2318:	20 83       	st	Z, r18
    231a:	05 c0       	rjmp	.+10     	; 0x2326 <nwkTxFrame+0x48>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	22 e1       	ldi	r18, 0x12	; 18
    2322:	fc 01       	movw	r30, r24
    2324:	20 83       	st	Z, r18
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	8d 57       	subi	r24, 0x7D	; 125
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	fc 01       	movw	r30, r24
    2330:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	8a 57       	subi	r24, 0x7A	; 122
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	fc 01       	movw	r30, r24
    233c:	80 81       	ld	r24, Z
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	81 70       	andi	r24, 0x01	; 1
    2344:	99 27       	eor	r25, r25
    2346:	89 2b       	or	r24, r25
    2348:	41 f0       	breq	.+16     	; 0x235a <nwkTxFrame+0x7c>
    header->macDstPanId = NWK_BROADCAST_PANID;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	2f ef       	ldi	r18, 0xFF	; 255
    2350:	3f ef       	ldi	r19, 0xFF	; 255
    2352:	fc 01       	movw	r30, r24
    2354:	34 83       	std	Z+4, r19	; 0x04
    2356:	23 83       	std	Z+3, r18	; 0x03
    2358:	09 c0       	rjmp	.+18     	; 0x236c <nwkTxFrame+0x8e>
  else
    header->macDstPanId = nwkIb.panId;
    235a:	20 91 e9 19 	lds	r18, 0x19E9	; 0x8019e9 <nwkIb+0x2>
    235e:	30 91 ea 19 	lds	r19, 0x19EA	; 0x8019ea <nwkIb+0x3>
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	34 83       	std	Z+4, r19	; 0x04
    236a:	23 83       	std	Z+3, r18	; 0x03

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	8a 57       	subi	r24, 0x7A	; 122
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	fc 01       	movw	r30, r24
    2376:	80 81       	ld	r24, Z
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	84 70       	andi	r24, 0x04	; 4
    237e:	99 27       	eor	r25, r25
    2380:	89 2b       	or	r24, r25
    2382:	81 f4       	brne	.+32     	; 0x23a4 <nwkTxFrame+0xc6>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	8a 57       	subi	r24, 0x7A	; 122
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
    238c:	fc 01       	movw	r30, r24
    238e:	80 81       	ld	r24, Z
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	81 70       	andi	r24, 0x01	; 1
    2396:	99 27       	eor	r25, r25
    header->macDstPanId = NWK_BROADCAST_PANID;
  else
    header->macDstPanId = nwkIb.panId;

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    2398:	89 2b       	or	r24, r25
    239a:	21 f4       	brne	.+8      	; 0x23a4 <nwkTxFrame+0xc6>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	4a d9       	rcall	.-3436   	; 0x1636 <nwkRoutePrepareTx>
    23a2:	0a c0       	rjmp	.+20     	; 0x23b8 <nwkTxFrame+0xda>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	fc 01       	movw	r30, r24
    23aa:	25 85       	ldd	r18, Z+13	; 0x0d
    23ac:	36 85       	ldd	r19, Z+14	; 0x0e
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	fc 01       	movw	r30, r24
    23b4:	36 83       	std	Z+6, r19	; 0x06
    23b6:	25 83       	std	Z+5, r18	; 0x05

  header->macSrcAddr = nwkIb.addr;
    23b8:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    23bc:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	fc 01       	movw	r30, r24
    23c6:	30 87       	std	Z+8, r19	; 0x08
    23c8:	27 83       	std	Z+7, r18	; 0x07
  header->macSeq = ++nwkIb.macSeqNum;
    23ca:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <nwkIb+0x5>
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	80 93 ec 19 	sts	0x19EC, r24	; 0x8019ec <nwkIb+0x5>
    23d4:	20 91 ec 19 	lds	r18, 0x19EC	; 0x8019ec <nwkIb+0x5>
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	fc 01       	movw	r30, r24
    23de:	22 83       	std	Z+2, r18	; 0x02

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	fc 01       	movw	r30, r24
    23e6:	85 81       	ldd	r24, Z+5	; 0x05
    23e8:	96 81       	ldd	r25, Z+6	; 0x06
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	a1 f4       	brne	.+40     	; 0x2416 <nwkTxFrame+0x138>
  {
    header->macFcf = 0x8841;
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	21 e4       	ldi	r18, 0x41	; 65
    23f4:	38 e8       	ldi	r19, 0x88	; 136
    23f6:	fc 01       	movw	r30, r24
    23f8:	31 83       	std	Z+1, r19	; 0x01
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    23fa:	20 83       	st	Z, r18
    23fc:	91 d7       	rcall	.+3874   	; 0x3320 <rand>
    23fe:	87 70       	andi	r24, 0x07	; 7
    2400:	99 27       	eor	r25, r25
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	9c 01       	movw	r18, r24
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	8c 57       	subi	r24, 0x7C	; 124
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	fc 01       	movw	r30, r24
    2410:	31 83       	std	Z+1, r19	; 0x01
    2412:	20 83       	st	Z, r18
  else
  {
    header->macFcf = 0x8861;
    frame->tx.timeout = 0;
  }
}
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <nwkTxFrame+0x154>
    header->macFcf = 0x8841;
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
  }
  else
  {
    header->macFcf = 0x8861;
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	21 e6       	ldi	r18, 0x61	; 97
    241c:	38 e8       	ldi	r19, 0x88	; 136
    241e:	fc 01       	movw	r30, r24
    2420:	31 83       	std	Z+1, r19	; 0x01
    2422:	20 83       	st	Z, r18
    frame->tx.timeout = 0;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	8c 57       	subi	r24, 0x7C	; 124
    242a:	9f 4f       	sbci	r25, 0xFF	; 255
    242c:	fc 01       	movw	r30, r24
    242e:	11 82       	std	Z+1, r1	; 0x01
    2430:	10 82       	st	Z, r1
  }
}
    2432:	00 00       	nop
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	08 95       	ret

00002442 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	00 d0       	rcall	.+0      	; 0x2448 <nwkTxBroadcastFrame+0x6>
    2448:	1f 92       	push	r1
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    2452:	0e 94 9d 07 	call	0xf3a	; 0xf3a <nwkFrameAlloc>
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	89 2b       	or	r24, r25
    2460:	09 f4       	brne	.+2      	; 0x2464 <nwkTxBroadcastFrame+0x22>
    2462:	63 c0       	rjmp	.+198    	; 0x252a <nwkTxBroadcastFrame+0xe8>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	22 e1       	ldi	r18, 0x12	; 18
    246a:	fc 01       	movw	r30, r24
    246c:	20 83       	st	Z, r18
  newFrame->size = frame->size;
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	fc 01       	movw	r30, r24
    2474:	21 81       	ldd	r18, Z+1	; 0x01
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	fc 01       	movw	r30, r24
    247c:	21 83       	std	Z+1, r18	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	8d 57       	subi	r24, 0x7D	; 125
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	fc 01       	movw	r30, r24
    2488:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    248a:	4a d7       	rcall	.+3732   	; 0x3320 <rand>
    248c:	87 70       	andi	r24, 0x07	; 7
    248e:	99 27       	eor	r25, r25
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	9c 01       	movw	r18, r24
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	8c 57       	subi	r24, 0x7C	; 124
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	fc 01       	movw	r30, r24
    249e:	31 83       	std	Z+1, r19	; 0x01
    24a0:	20 83       	st	Z, r18
  newFrame->tx.confirm = NULL;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	89 57       	subi	r24, 0x79	; 121
    24a8:	9f 4f       	sbci	r25, 0xFF	; 255
    24aa:	fc 01       	movw	r30, r24
    24ac:	11 82       	std	Z+1, r1	; 0x01
    24ae:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	fc 01       	movw	r30, r24
    24b6:	81 81       	ldd	r24, Z+1	; 0x01
    24b8:	48 2f       	mov	r20, r24
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	9c 01       	movw	r18, r24
    24c2:	2e 5f       	subi	r18, 0xFE	; 254
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	02 96       	adiw	r24, 0x02	; 2
    24cc:	b9 01       	movw	r22, r18
    24ce:	36 d7       	rcall	.+3692   	; 0x333c <memcpy>

  newFrame->header.macFcf = 0x8841;
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	21 e4       	ldi	r18, 0x41	; 65
    24d6:	38 e8       	ldi	r19, 0x88	; 136
    24d8:	fc 01       	movw	r30, r24
    24da:	33 83       	std	Z+3, r19	; 0x03
    24dc:	22 83       	std	Z+2, r18	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	2f ef       	ldi	r18, 0xFF	; 255
    24e4:	3f ef       	ldi	r19, 0xFF	; 255
    24e6:	fc 01       	movw	r30, r24
    24e8:	30 87       	std	Z+8, r19	; 0x08
    24ea:	27 83       	std	Z+7, r18	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	fc 01       	movw	r30, r24
    24f2:	25 81       	ldd	r18, Z+5	; 0x05
    24f4:	36 81       	ldd	r19, Z+6	; 0x06
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	fc 01       	movw	r30, r24
    24fc:	36 83       	std	Z+6, r19	; 0x06
    24fe:	25 83       	std	Z+5, r18	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    2500:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
    2504:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	fc 01       	movw	r30, r24
    250e:	32 87       	std	Z+10, r19	; 0x0a
    2510:	21 87       	std	Z+9, r18	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    2512:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <nwkIb+0x5>
    2516:	8f 5f       	subi	r24, 0xFF	; 255
    2518:	80 93 ec 19 	sts	0x19EC, r24	; 0x8019ec <nwkIb+0x5>
    251c:	20 91 ec 19 	lds	r18, 0x19EC	; 0x8019ec <nwkIb+0x5>
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	fc 01       	movw	r30, r24
    2526:	24 83       	std	Z+4, r18	; 0x04
    2528:	01 c0       	rjmp	.+2      	; 0x252c <nwkTxBroadcastFrame+0xea>
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    return;
    252a:	00 00       	nop
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	00 d0       	rcall	.+0      	; 0x2540 <nwkTxAckReceived+0x6>
    2540:	00 d0       	rcall	.+0      	; 0x2542 <nwkTxAckReceived+0x8>
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	fc 01       	movw	r30, r24
    2550:	87 81       	ldd	r24, Z+7	; 0x07
    2552:	90 85       	ldd	r25, Z+8	; 0x08
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame = NULL;
    2558:	1a 82       	std	Y+2, r1	; 0x02
    255a:	19 82       	std	Y+1, r1	; 0x01

  if (sizeof(NwkCommandAck_t) != ind->size)
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	fc 01       	movw	r30, r24
    2562:	81 85       	ldd	r24, Z+9	; 0x09
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	19 f1       	breq	.+70     	; 0x25ae <nwkTxAckReceived+0x74>
    return false;
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	2c c0       	rjmp	.+88     	; 0x25c4 <nwkTxAckReceived+0x8a>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	fc 01       	movw	r30, r24
    2572:	80 81       	ld	r24, Z
    2574:	86 31       	cpi	r24, 0x16	; 22
    2576:	d9 f4       	brne	.+54     	; 0x25ae <nwkTxAckReceived+0x74>
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	fc 01       	movw	r30, r24
    257e:	24 85       	ldd	r18, Z+12	; 0x0c
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	fc 01       	movw	r30, r24
    2586:	81 81       	ldd	r24, Z+1	; 0x01
    2588:	28 17       	cp	r18, r24
    258a:	89 f4       	brne	.+34     	; 0x25ae <nwkTxAckReceived+0x74>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	27 e1       	ldi	r18, 0x17	; 23
    2592:	fc 01       	movw	r30, r24
    2594:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	fc 01       	movw	r30, r24
    259c:	22 81       	ldd	r18, Z+2	; 0x02
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	8a 57       	subi	r24, 0x7A	; 122
    25a4:	9f 4f       	sbci	r25, 0xFF	; 255
    25a6:	fc 01       	movw	r30, r24
    25a8:	20 83       	st	Z, r18
      return true;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	0b c0       	rjmp	.+22     	; 0x25c4 <nwkTxAckReceived+0x8a>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	0e 94 2d 08 	call	0x105a	; 0x105a <nwkFrameNext>
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	89 2b       	or	r24, r25
    25c0:	a9 f6       	brne	.-86     	; 0x256c <nwkTxAckReceived+0x32>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    25c2:	80 e0       	ldi	r24, 0x00	; 0
}
    25c4:	26 96       	adiw	r28, 0x06	; 6
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	08 95       	ret

000025d6 <nwkTxAckWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	00 d0       	rcall	.+0      	; 0x25dc <nwkTxAckWaitTimerHandler+0x6>
    25dc:	1f 92       	push	r1
    25de:	1f 92       	push	r1
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	9d 83       	std	Y+5, r25	; 0x05
    25e6:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame = NULL;
    25e8:	1a 82       	std	Y+2, r1	; 0x02
    25ea:	19 82       	std	Y+1, r1	; 0x01
  bool restart = false;
    25ec:	1b 82       	std	Y+3, r1	; 0x03

  while (NULL != (frame = nwkFrameNext(frame)))
    25ee:	26 c0       	rjmp	.+76     	; 0x263c <nwkTxAckWaitTimerHandler+0x66>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	fc 01       	movw	r30, r24
    25f6:	80 81       	ld	r24, Z
    25f8:	86 31       	cpi	r24, 0x16	; 22
    25fa:	01 f5       	brne	.+64     	; 0x263c <nwkTxAckWaitTimerHandler+0x66>
    {
      restart = true;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	8b 83       	std	Y+3, r24	; 0x03

      if (0 == --frame->tx.timeout)
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	8c 57       	subi	r24, 0x7C	; 124
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	fc 01       	movw	r30, r24
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	9c 01       	movw	r18, r24
    2610:	21 50       	subi	r18, 0x01	; 1
    2612:	31 09       	sbc	r19, r1
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	8c 57       	subi	r24, 0x7C	; 124
    261a:	9f 4f       	sbci	r25, 0xFF	; 255
    261c:	fc 01       	movw	r30, r24
    261e:	31 83       	std	Z+1, r19	; 0x01
    2620:	20 83       	st	Z, r18
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	8c 57       	subi	r24, 0x7C	; 124
    2628:	9f 4f       	sbci	r25, 0xFF	; 255
    262a:	fc 01       	movw	r30, r24
    262c:	80 81       	ld	r24, Z
    262e:	91 81       	ldd	r25, Z+1	; 0x01
    2630:	89 2b       	or	r24, r25
    2632:	21 f4       	brne	.+8      	; 0x263c <nwkTxAckWaitTimerHandler+0x66>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	60 e1       	ldi	r22, 0x10	; 16
    263a:	19 d0       	rcall	.+50     	; 0x266e <nwkTxConfirm>
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	0e 94 2d 08 	call	0x105a	; 0x105a <nwkFrameNext>
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	89 2b       	or	r24, r25
    264e:	81 f6       	brne	.-96     	; 0x25f0 <nwkTxAckWaitTimerHandler+0x1a>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	88 23       	and	r24, r24
    2654:	19 f0       	breq	.+6      	; 0x265c <nwkTxAckWaitTimerHandler+0x86>
    SYS_TimerStart(timer);
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	a5 d3       	rcall	.+1866   	; 0x2da6 <SYS_TimerStart>
}
    265c:	00 00       	nop
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	08 95       	ret

0000266e <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	00 d0       	rcall	.+0      	; 0x2674 <nwkTxConfirm+0x6>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	6b 83       	std	Y+3, r22	; 0x03
  frame->state = NWK_TX_STATE_CONFIRM;
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	27 e1       	ldi	r18, 0x17	; 23
    2684:	fc 01       	movw	r30, r24
    2686:	20 83       	st	Z, r18
  frame->tx.status = status;
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	9a 81       	ldd	r25, Y+2	; 0x02
    268c:	8d 57       	subi	r24, 0x7D	; 125
    268e:	9f 4f       	sbci	r25, 0xFF	; 255
    2690:	2b 81       	ldd	r18, Y+3	; 0x03
    2692:	fc 01       	movw	r30, r24
    2694:	20 83       	st	Z, r18
}
    2696:	00 00       	nop
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <nwkTxDelayTimerHandler+0x6>
    26aa:	1f 92       	push	r1
    26ac:	1f 92       	push	r1
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	9d 83       	std	Y+5, r25	; 0x05
    26b4:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame = NULL;
    26b6:	1a 82       	std	Y+2, r1	; 0x02
    26b8:	19 82       	std	Y+1, r1	; 0x01
  bool restart = false;
    26ba:	1b 82       	std	Y+3, r1	; 0x03

  while (NULL != (frame = nwkFrameNext(frame)))
    26bc:	27 c0       	rjmp	.+78     	; 0x270c <nwkTxDelayTimerHandler+0x68>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	fc 01       	movw	r30, r24
    26c4:	80 81       	ld	r24, Z
    26c6:	81 31       	cpi	r24, 0x11	; 17
    26c8:	09 f5       	brne	.+66     	; 0x270c <nwkTxDelayTimerHandler+0x68>
    {
      restart = true;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	8b 83       	std	Y+3, r24	; 0x03

      if (0 == --frame->tx.timeout)
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	8c 57       	subi	r24, 0x7C	; 124
    26d4:	9f 4f       	sbci	r25, 0xFF	; 255
    26d6:	fc 01       	movw	r30, r24
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	9c 01       	movw	r18, r24
    26de:	21 50       	subi	r18, 0x01	; 1
    26e0:	31 09       	sbc	r19, r1
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	8c 57       	subi	r24, 0x7C	; 124
    26e8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ea:	fc 01       	movw	r30, r24
    26ec:	31 83       	std	Z+1, r19	; 0x01
    26ee:	20 83       	st	Z, r18
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	8c 57       	subi	r24, 0x7C	; 124
    26f6:	9f 4f       	sbci	r25, 0xFF	; 255
    26f8:	fc 01       	movw	r30, r24
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	89 2b       	or	r24, r25
    2700:	29 f4       	brne	.+10     	; 0x270c <nwkTxDelayTimerHandler+0x68>
        frame->state = NWK_TX_STATE_SEND;
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	23 e1       	ldi	r18, 0x13	; 19
    2708:	fc 01       	movw	r30, r24
    270a:	20 83       	st	Z, r18
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	0e 94 2d 08 	call	0x105a	; 0x105a <nwkFrameNext>
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	89 2b       	or	r24, r25
    271e:	79 f6       	brne	.-98     	; 0x26be <nwkTxDelayTimerHandler+0x1a>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	88 23       	and	r24, r24
    2724:	19 f0       	breq	.+6      	; 0x272c <nwkTxDelayTimerHandler+0x88>
    SYS_TimerStart(timer);
    2726:	8c 81       	ldd	r24, Y+4	; 0x04
    2728:	9d 81       	ldd	r25, Y+5	; 0x05
    272a:	3d d3       	rcall	.+1658   	; 0x2da6 <SYS_TimerStart>
}
    272c:	00 00       	nop
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	08 95       	ret

0000273e <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	1f 92       	push	r1
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	89 83       	std	Y+1, r24	; 0x01
  switch (status)
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	91 05       	cpc	r25, r1
    2754:	39 f0       	breq	.+14     	; 0x2764 <nwkTxConvertPhyStatus+0x26>
    2756:	82 30       	cpi	r24, 0x02	; 2
    2758:	91 05       	cpc	r25, r1
    275a:	31 f0       	breq	.+12     	; 0x2768 <nwkTxConvertPhyStatus+0x2a>
    275c:	89 2b       	or	r24, r25
    275e:	31 f4       	brne	.+12     	; 0x276c <nwkTxConvertPhyStatus+0x2e>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	05 c0       	rjmp	.+10     	; 0x276e <nwkTxConvertPhyStatus+0x30>

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2764:	80 e2       	ldi	r24, 0x20	; 32
    2766:	03 c0       	rjmp	.+6      	; 0x276e <nwkTxConvertPhyStatus+0x30>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    2768:	81 e2       	ldi	r24, 0x21	; 33
    276a:	01 c0       	rjmp	.+2      	; 0x276e <nwkTxConvertPhyStatus+0x30>

    default:
      return NWK_ERROR_STATUS;
    276c:	81 e0       	ldi	r24, 0x01	; 1
  }
}
    276e:	0f 90       	pop	r0
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	08 95       	ret

00002776 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	1f 92       	push	r1
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	89 83       	std	Y+1, r24	; 0x01
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2786:	00 91 44 19 	lds	r16, 0x1944	; 0x801944 <nwkTxPhyActiveFrame>
    278a:	10 91 45 19 	lds	r17, 0x1945	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	d6 df       	rcall	.-84     	; 0x273e <nwkTxConvertPhyStatus>
    2792:	28 2f       	mov	r18, r24
    2794:	c8 01       	movw	r24, r16
    2796:	8d 57       	subi	r24, 0x7D	; 125
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	fc 01       	movw	r30, r24
    279c:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    279e:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <nwkTxPhyActiveFrame>
    27a2:	90 91 45 19 	lds	r25, 0x1945	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    27a6:	25 e1       	ldi	r18, 0x15	; 21
    27a8:	fc 01       	movw	r30, r24
    27aa:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame = NULL;
    27ac:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    27b0:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    27b4:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
    27b8:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
    27c2:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
}
    27c6:	00 00       	nop
    27c8:	0f 90       	pop	r0
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	08 95       	ret

000027d4 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	1f 92       	push	r1
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
  NwkFrame_t *frame = NULL;
    27e0:	1a 82       	std	Y+2, r1	; 0x02
    27e2:	19 82       	std	Y+1, r1	; 0x01

  while (NULL != (frame = nwkFrameNext(frame)))
    27e4:	b4 c0       	rjmp	.+360    	; 0x294e <nwkTxTaskHandler+0x17a>
  {
    switch (frame->state)
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ea:	fc 01       	movw	r30, r24
    27ec:	80 81       	ld	r24, Z
    27ee:	88 2f       	mov	r24, r24
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	84 31       	cpi	r24, 0x14	; 20
    27f4:	91 05       	cpc	r25, r1
    27f6:	09 f4       	brne	.+2      	; 0x27fa <nwkTxTaskHandler+0x26>
    27f8:	aa c0       	rjmp	.+340    	; 0x294e <nwkTxTaskHandler+0x17a>
    27fa:	85 31       	cpi	r24, 0x15	; 21
    27fc:	91 05       	cpc	r25, r1
    27fe:	34 f4       	brge	.+12     	; 0x280c <nwkTxTaskHandler+0x38>
    2800:	82 31       	cpi	r24, 0x12	; 18
    2802:	91 05       	cpc	r25, r1
    2804:	79 f0       	breq	.+30     	; 0x2824 <nwkTxTaskHandler+0x50>
    2806:	43 97       	sbiw	r24, 0x13	; 19
    2808:	29 f1       	breq	.+74     	; 0x2854 <nwkTxTaskHandler+0x80>
    280a:	a0 c0       	rjmp	.+320    	; 0x294c <nwkTxTaskHandler+0x178>
    280c:	86 31       	cpi	r24, 0x16	; 22
    280e:	91 05       	cpc	r25, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <nwkTxTaskHandler+0x40>
    2812:	9d c0       	rjmp	.+314    	; 0x294e <nwkTxTaskHandler+0x17a>
    2814:	86 31       	cpi	r24, 0x16	; 22
    2816:	91 05       	cpc	r25, r1
    2818:	0c f4       	brge	.+2      	; 0x281c <nwkTxTaskHandler+0x48>
    281a:	41 c0       	rjmp	.+130    	; 0x289e <nwkTxTaskHandler+0xca>
    281c:	47 97       	sbiw	r24, 0x17	; 23
    281e:	09 f4       	brne	.+2      	; 0x2822 <nwkTxTaskHandler+0x4e>
    2820:	77 c0       	rjmp	.+238    	; 0x2910 <nwkTxTaskHandler+0x13c>
    2822:	94 c0       	rjmp	.+296    	; 0x294c <nwkTxTaskHandler+0x178>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	8c 57       	subi	r24, 0x7C	; 124
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	fc 01       	movw	r30, r24
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	89 2b       	or	r24, r25
    2834:	49 f0       	breq	.+18     	; 0x2848 <nwkTxTaskHandler+0x74>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	9a 81       	ldd	r25, Y+2	; 0x02
    283a:	21 e1       	ldi	r18, 0x11	; 17
    283c:	fc 01       	movw	r30, r24
    283e:	20 83       	st	Z, r18
          SYS_TimerStart(&nwkTxDelayTimer);
    2840:	83 e5       	ldi	r24, 0x53	; 83
    2842:	99 e1       	ldi	r25, 0x19	; 25
    2844:	b0 d2       	rcall	.+1376   	; 0x2da6 <SYS_TimerStart>
    2846:	83 c0       	rjmp	.+262    	; 0x294e <nwkTxTaskHandler+0x17a>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	23 e1       	ldi	r18, 0x13	; 19
    284e:	fc 01       	movw	r30, r24
    2850:	20 83       	st	Z, r18
        }
      } break;
    2852:	7d c0       	rjmp	.+250    	; 0x294e <nwkTxTaskHandler+0x17a>

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    2854:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <nwkTxPhyActiveFrame>
    2858:	90 91 45 19 	lds	r25, 0x1945	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    285c:	89 2b       	or	r24, r25
    285e:	09 f0       	breq	.+2      	; 0x2862 <nwkTxTaskHandler+0x8e>
    2860:	76 c0       	rjmp	.+236    	; 0x294e <nwkTxTaskHandler+0x17a>
        {
          nwkTxPhyActiveFrame = frame;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	90 93 45 19 	sts	0x1945, r25	; 0x801945 <nwkTxPhyActiveFrame+0x1>
    286a:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	24 e1       	ldi	r18, 0x14	; 20
    2874:	fc 01       	movw	r30, r24
    2876:	20 83       	st	Z, r18
          PHY_DataReq(frame->data, frame->size);
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	fc 01       	movw	r30, r24
    287e:	21 81       	ldd	r18, Z+1	; 0x01
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	02 96       	adiw	r24, 0x02	; 2
    2886:	62 2f       	mov	r22, r18
    2888:	0c d1       	rcall	.+536    	; 0x2aa2 <PHY_DataReq>
          nwkIb.lock++;
    288a:	80 91 0d 1a 	lds	r24, 0x1A0D	; 0x801a0d <nwkIb+0x26>
    288e:	90 91 0e 1a 	lds	r25, 0x1A0E	; 0x801a0e <nwkIb+0x27>
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	90 93 0e 1a 	sts	0x1A0E, r25	; 0x801a0e <nwkIb+0x27>
    2898:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <nwkIb+0x26>
        }
      } break;
    289c:	58 c0       	rjmp	.+176    	; 0x294e <nwkTxTaskHandler+0x17a>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	9a 81       	ldd	r25, Y+2	; 0x02
    28a2:	8d 57       	subi	r24, 0x7D	; 125
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	fc 01       	movw	r30, r24
    28a8:	80 81       	ld	r24, Z
    28aa:	88 23       	and	r24, r24
    28ac:	59 f5       	brne	.+86     	; 0x2904 <nwkTxTaskHandler+0x130>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	fc 01       	movw	r30, r24
    28b4:	25 85       	ldd	r18, Z+13	; 0x0d
    28b6:	36 85       	ldd	r19, Z+14	; 0x0e
    28b8:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <nwkIb>
    28bc:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <nwkIb+0x1>
    28c0:	28 17       	cp	r18, r24
    28c2:	39 07       	cpc	r19, r25
    28c4:	c9 f4       	brne	.+50     	; 0x28f8 <nwkTxTaskHandler+0x124>
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	fc 01       	movw	r30, r24
    28cc:	83 85       	ldd	r24, Z+11	; 0x0b
    28ce:	81 70       	andi	r24, 0x01	; 1
    28d0:	88 23       	and	r24, r24
    28d2:	91 f0       	breq	.+36     	; 0x28f8 <nwkTxTaskHandler+0x124>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	26 e1       	ldi	r18, 0x16	; 22
    28da:	fc 01       	movw	r30, r24
    28dc:	20 83       	st	Z, r18
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	8c 57       	subi	r24, 0x7C	; 124
    28e4:	9f 4f       	sbci	r25, 0xFF	; 255
    28e6:	29 e2       	ldi	r18, 0x29	; 41
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	fc 01       	movw	r30, r24
    28ec:	31 83       	std	Z+1, r19	; 0x01
    28ee:	20 83       	st	Z, r18
            SYS_TimerStart(&nwkTxAckWaitTimer);
    28f0:	86 e4       	ldi	r24, 0x46	; 70
    28f2:	99 e1       	ldi	r25, 0x19	; 25
    28f4:	58 d2       	rcall	.+1200   	; 0x2da6 <SYS_TimerStart>
    28f6:	0b c0       	rjmp	.+22     	; 0x290e <nwkTxTaskHandler+0x13a>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	27 e1       	ldi	r18, 0x17	; 23
    28fe:	fc 01       	movw	r30, r24
    2900:	20 83       	st	Z, r18
    2902:	25 c0       	rjmp	.+74     	; 0x294e <nwkTxTaskHandler+0x17a>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	27 e1       	ldi	r18, 0x17	; 23
    290a:	fc 01       	movw	r30, r24
    290c:	20 83       	st	Z, r18
	}
      } break;
    290e:	1f c0       	rjmp	.+62     	; 0x294e <nwkTxTaskHandler+0x17a>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	0e 94 a2 0a 	call	0x1544	; 0x1544 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	89 57       	subi	r24, 0x79	; 121
    291e:	9f 4f       	sbci	r25, 0xFF	; 255
    2920:	fc 01       	movw	r30, r24
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	89 2b       	or	r24, r25
    2928:	29 f4       	brne	.+10     	; 0x2934 <nwkTxTaskHandler+0x160>
          nwkFrameFree(frame);
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	0e 94 12 08 	call	0x1024	; 0x1024 <nwkFrameFree>
    2932:	0d c0       	rjmp	.+26     	; 0x294e <nwkTxTaskHandler+0x17a>
        else
          frame->tx.confirm(frame);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	9a 81       	ldd	r25, Y+2	; 0x02
    2938:	89 57       	subi	r24, 0x79	; 121
    293a:	9f 4f       	sbci	r25, 0xFF	; 255
    293c:	fc 01       	movw	r30, r24
    293e:	20 81       	ld	r18, Z
    2940:	31 81       	ldd	r19, Z+1	; 0x01
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	f9 01       	movw	r30, r18
    2948:	19 95       	eicall
      } break;
    294a:	01 c0       	rjmp	.+2      	; 0x294e <nwkTxTaskHandler+0x17a>

      default:
        break;
    294c:	00 00       	nop
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	0e 94 2d 08 	call	0x105a	; 0x105a <nwkFrameNext>
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	89 2b       	or	r24, r25
    2960:	09 f0       	breq	.+2      	; 0x2964 <nwkTxTaskHandler+0x190>
    2962:	41 cf       	rjmp	.-382    	; 0x27e6 <nwkTxTaskHandler+0x12>

      default:
        break;
    };
  }
}
    2964:	00 00       	nop
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <PHY_Init>:
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
}
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	89 e3       	ldi	r24, 0x39	; 57
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	fc 01       	movw	r30, r24
    297e:	20 81       	ld	r18, Z
    2980:	21 60       	ori	r18, 0x01	; 1
    2982:	fc 01       	movw	r30, r24
    2984:	20 83       	st	Z, r18
    2986:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <phyRxState>
    298a:	10 92 e3 19 	sts	0x19E3, r1	; 0x8019e3 <phyBand>
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <phyState>
    2994:	88 e0       	ldi	r24, 0x08	; 8
    2996:	05 d1       	rcall	.+522    	; 0x2ba2 <phyTrxSetState>
    2998:	86 e5       	ldi	r24, 0x56	; 86
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	2b ee       	ldi	r18, 0xEB	; 235
    299e:	fc 01       	movw	r30, r24
    29a0:	20 83       	st	Z, r18
    29a2:	8c e4       	ldi	r24, 0x4C	; 76
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	fc 01       	movw	r30, r24
    29a8:	20 81       	ld	r18, Z
    29aa:	20 68       	ori	r18, 0x80	; 128
    29ac:	fc 01       	movw	r30, r24
    29ae:	20 83       	st	Z, r18
    29b0:	00 00       	nop
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	08 95       	ret

000029b8 <PHY_SetRxState>:
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	1f 92       	push	r1
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	89 83       	std	Y+1, r24	; 0x01
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	80 93 e1 19 	sts	0x19E1, r24	; 0x8019e1 <phyRxState>
    29ca:	d6 d0       	rcall	.+428    	; 0x2b78 <phySetRxState>
    29cc:	00 00       	nop
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	08 95       	ret

000029d6 <PHY_SetChannel>:
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	1f 92       	push	r1
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	80 93 e2 19 	sts	0x19E2, r24	; 0x8019e2 <phyChannel>
    29e8:	9c d0       	rcall	.+312    	; 0x2b22 <phySetChannel>
    29ea:	00 00       	nop
    29ec:	0f 90       	pop	r0
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	08 95       	ret

000029f4 <PHY_SetPanId>:
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <PHY_SetPanId+0x6>
    29fa:	1f 92       	push	r1
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	9c 83       	std	Y+4, r25	; 0x04
    2a02:	8b 83       	std	Y+3, r24	; 0x03
    2a04:	ce 01       	movw	r24, r28
    2a06:	03 96       	adiw	r24, 0x03	; 3
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	82 e6       	ldi	r24, 0x62	; 98
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	29 81       	ldd	r18, Y+1	; 0x01
    2a12:	3a 81       	ldd	r19, Y+2	; 0x02
    2a14:	f9 01       	movw	r30, r18
    2a16:	20 81       	ld	r18, Z
    2a18:	fc 01       	movw	r30, r24
    2a1a:	20 83       	st	Z, r18
    2a1c:	83 e6       	ldi	r24, 0x63	; 99
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	29 81       	ldd	r18, Y+1	; 0x01
    2a22:	3a 81       	ldd	r19, Y+2	; 0x02
    2a24:	f9 01       	movw	r30, r18
    2a26:	21 81       	ldd	r18, Z+1	; 0x01
    2a28:	fc 01       	movw	r30, r24
    2a2a:	20 83       	st	Z, r18
    2a2c:	00 00       	nop
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	08 95       	ret

00002a3c <PHY_SetShortAddr>:
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <PHY_SetShortAddr+0x6>
    2a42:	1f 92       	push	r1
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	9c 83       	std	Y+4, r25	; 0x04
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	03 96       	adiw	r24, 0x03	; 3
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	80 e6       	ldi	r24, 0x60	; 96
    2a56:	91 e0       	ldi	r25, 0x01	; 1
    2a58:	29 81       	ldd	r18, Y+1	; 0x01
    2a5a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	20 81       	ld	r18, Z
    2a60:	fc 01       	movw	r30, r24
    2a62:	20 83       	st	Z, r18
    2a64:	81 e6       	ldi	r24, 0x61	; 97
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	29 81       	ldd	r18, Y+1	; 0x01
    2a6a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a6c:	f9 01       	movw	r30, r18
    2a6e:	21 81       	ldd	r18, Z+1	; 0x01
    2a70:	fc 01       	movw	r30, r24
    2a72:	20 83       	st	Z, r18
    2a74:	8d e6       	ldi	r24, 0x6D	; 109
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	29 81       	ldd	r18, Y+1	; 0x01
    2a7a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a7c:	f9 01       	movw	r30, r18
    2a7e:	40 81       	ld	r20, Z
    2a80:	29 81       	ldd	r18, Y+1	; 0x01
    2a82:	3a 81       	ldd	r19, Y+2	; 0x02
    2a84:	2f 5f       	subi	r18, 0xFF	; 255
    2a86:	3f 4f       	sbci	r19, 0xFF	; 255
    2a88:	f9 01       	movw	r30, r18
    2a8a:	20 81       	ld	r18, Z
    2a8c:	24 0f       	add	r18, r20
    2a8e:	fc 01       	movw	r30, r24
    2a90:	20 83       	st	Z, r18
    2a92:	00 00       	nop
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	08 95       	ret

00002aa2 <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <PHY_DataReq+0x6>
    2aa8:	1f 92       	push	r1
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	9b 83       	std	Y+3, r25	; 0x03
    2ab0:	8a 83       	std	Y+2, r24	; 0x02
    2ab2:	6c 83       	std	Y+4, r22	; 0x04
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2ab4:	89 e1       	ldi	r24, 0x19	; 25
    2ab6:	75 d0       	rcall	.+234    	; 0x2ba2 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2ab8:	8f e4       	ldi	r24, 0x4F	; 79
    2aba:	91 e0       	ldi	r25, 0x01	; 1
    2abc:	2f ef       	ldi	r18, 0xFF	; 255
    2abe:	fc 01       	movw	r30, r24
    2ac0:	20 83       	st	Z, r18

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    2ac2:	80 e8       	ldi	r24, 0x80	; 128
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac8:	2e 5f       	subi	r18, 0xFE	; 254
    2aca:	fc 01       	movw	r30, r24
    2acc:	20 83       	st	Z, r18
  for (uint8_t i = 0; i < size; i++)
    2ace:	19 82       	std	Y+1, r1	; 0x01
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <PHY_DataReq+0x58>
    TRX_FRAME_BUFFER(i+1) = data[i];
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	8f 57       	subi	r24, 0x7F	; 127
    2ada:	9e 4f       	sbci	r25, 0xFE	; 254
    2adc:	ac 01       	movw	r20, r24
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ae6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ae8:	82 0f       	add	r24, r18
    2aea:	93 1f       	adc	r25, r19
    2aec:	fc 01       	movw	r30, r24
    2aee:	80 81       	ld	r24, Z
    2af0:	fa 01       	movw	r30, r20
    2af2:	80 83       	st	Z, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	8f 5f       	subi	r24, 0xFF	; 255
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	99 81       	ldd	r25, Y+1	; 0x01
    2afc:	8c 81       	ldd	r24, Y+4	; 0x04
    2afe:	98 17       	cp	r25, r24
    2b00:	40 f3       	brcs	.-48     	; 0x2ad2 <PHY_DataReq+0x30>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    2b02:	83 e0       	ldi	r24, 0x03	; 3
    2b04:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    2b08:	82 e4       	ldi	r24, 0x42	; 66
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	22 e0       	ldi	r18, 0x02	; 2
    2b0e:	fc 01       	movw	r30, r24
    2b10:	20 83       	st	Z, r18
}
    2b12:	00 00       	nop
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	08 95       	ret

00002b22 <phySetChannel>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
  CC_CTRL_1_REG_s.ccBand = phyBand;
    2b2a:	84 e5       	ldi	r24, 0x54	; 84
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	20 91 e3 19 	lds	r18, 0x19E3	; 0x8019e3 <phyBand>
    2b32:	2f 70       	andi	r18, 0x0F	; 15
    2b34:	2f 70       	andi	r18, 0x0F	; 15
    2b36:	fc 01       	movw	r30, r24
    2b38:	30 81       	ld	r19, Z
    2b3a:	30 7f       	andi	r19, 0xF0	; 240
    2b3c:	23 2b       	or	r18, r19
    2b3e:	fc 01       	movw	r30, r24
    2b40:	20 83       	st	Z, r18

  if (phyBand)
    2b42:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <phyBand>
    2b46:	88 23       	and	r24, r24
    2b48:	39 f0       	breq	.+14     	; 0x2b58 <phySetChannel+0x36>
    CC_CTRL_0_REG = phyChannel;
    2b4a:	83 e5       	ldi	r24, 0x53	; 83
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	20 91 e2 19 	lds	r18, 0x19E2	; 0x8019e2 <phyChannel>
    2b52:	fc 01       	movw	r30, r24
    2b54:	20 83       	st	Z, r18
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
}
    2b56:	0c c0       	rjmp	.+24     	; 0x2b70 <phySetChannel+0x4e>
  CC_CTRL_1_REG_s.ccBand = phyBand;

  if (phyBand)
    CC_CTRL_0_REG = phyChannel;
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
    2b58:	88 e4       	ldi	r24, 0x48	; 72
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	20 91 e2 19 	lds	r18, 0x19E2	; 0x8019e2 <phyChannel>
    2b60:	2f 71       	andi	r18, 0x1F	; 31
    2b62:	2f 71       	andi	r18, 0x1F	; 31
    2b64:	fc 01       	movw	r30, r24
    2b66:	30 81       	ld	r19, Z
    2b68:	30 7e       	andi	r19, 0xE0	; 224
    2b6a:	23 2b       	or	r18, r19
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	20 83       	st	Z, r18
}
    2b70:	00 00       	nop
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	08 95       	ret

00002b78 <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
  phyTrxSetState(TRX_CMD_TRX_OFF);
    2b80:	88 e0       	ldi	r24, 0x08	; 8
    2b82:	0f d0       	rcall	.+30     	; 0x2ba2 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2b84:	8f e4       	ldi	r24, 0x4F	; 79
    2b86:	91 e0       	ldi	r25, 0x01	; 1
    2b88:	2f ef       	ldi	r18, 0xFF	; 255
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	20 83       	st	Z, r18

  if (phyRxState)
    2b8e:	80 91 e1 19 	lds	r24, 0x19E1	; 0x8019e1 <phyRxState>
    2b92:	88 23       	and	r24, r24
    2b94:	11 f0       	breq	.+4      	; 0x2b9a <phySetRxState+0x22>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    2b96:	86 e1       	ldi	r24, 0x16	; 22
    2b98:	04 d0       	rcall	.+8      	; 0x2ba2 <phyTrxSetState>
}
    2b9a:	00 00       	nop
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	1f 92       	push	r1
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	89 83       	std	Y+1, r24	; 0x01
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    2bae:	82 e4       	ldi	r24, 0x42	; 66
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	23 e0       	ldi	r18, 0x03	; 3
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	20 83       	st	Z, r18
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    2bb8:	00 00       	nop
    2bba:	81 e4       	ldi	r24, 0x41	; 65
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8f 71       	andi	r24, 0x1F	; 31
    2bc4:	88 30       	cpi	r24, 0x08	; 8
    2bc6:	c9 f7       	brne	.-14     	; 0x2bba <phyTrxSetState+0x18>

  TRX_STATE_REG = state;
    2bc8:	82 e4       	ldi	r24, 0x42	; 66
    2bca:	91 e0       	ldi	r25, 0x01	; 1
    2bcc:	29 81       	ldd	r18, Y+1	; 0x01
    2bce:	fc 01       	movw	r30, r24
    2bd0:	20 83       	st	Z, r18
  while (state != TRX_STATUS_REG_s.trxStatus);
    2bd2:	00 00       	nop
    2bd4:	81 e4       	ldi	r24, 0x41	; 65
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	fc 01       	movw	r30, r24
    2bda:	80 81       	ld	r24, Z
    2bdc:	8f 71       	andi	r24, 0x1F	; 31
    2bde:	98 2f       	mov	r25, r24
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	98 17       	cp	r25, r24
    2be4:	b9 f7       	brne	.-18     	; 0x2bd4 <phyTrxSetState+0x32>
}
    2be6:	00 00       	nop
    2be8:	0f 90       	pop	r0
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	28 97       	sbiw	r28, 0x08	; 8
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
  if (PHY_STATE_SLEEP == phyState)
    2c04:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyState>
    2c08:	82 30       	cpi	r24, 0x02	; 2
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <PHY_TaskHandler+0x1e>
    2c0c:	9c c0       	rjmp	.+312    	; 0x2d46 <PHY_TaskHandler+0x156>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2c0e:	8f e4       	ldi	r24, 0x4F	; 79
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	fc 01       	movw	r30, r24
    2c14:	80 81       	ld	r24, Z
    2c16:	83 fb       	bst	r24, 3
    2c18:	88 27       	eor	r24, r24
    2c1a:	80 f9       	bld	r24, 0
    2c1c:	88 23       	and	r24, r24
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <PHY_TaskHandler+0x32>
    2c20:	59 c0       	rjmp	.+178    	; 0x2cd4 <PHY_TaskHandler+0xe4>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    2c22:	8b e7       	ldi	r24, 0x7B	; 123
    2c24:	91 e0       	ldi	r25, 0x01	; 1
    2c26:	fc 01       	movw	r30, r24
    2c28:	80 81       	ld	r24, Z
    2c2a:	8b 83       	std	Y+3, r24	; 0x03

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2c2c:	19 82       	std	Y+1, r1	; 0x01
    2c2e:	11 c0       	rjmp	.+34     	; 0x2c52 <PHY_TaskHandler+0x62>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	88 2f       	mov	r24, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	29 81       	ldd	r18, Y+1	; 0x01
    2c38:	22 2f       	mov	r18, r18
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	20 58       	subi	r18, 0x80	; 128
    2c3e:	3e 4f       	sbci	r19, 0xFE	; 254
    2c40:	f9 01       	movw	r30, r18
    2c42:	20 81       	ld	r18, Z
    2c44:	8f 59       	subi	r24, 0x9F	; 159
    2c46:	96 4e       	sbci	r25, 0xE6	; 230
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	8f 5f       	subi	r24, 0xFF	; 255
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	28 2f       	mov	r18, r24
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	28 17       	cp	r18, r24
    2c62:	39 07       	cpc	r19, r25
    2c64:	2c f3       	brlt	.-54     	; 0x2c30 <PHY_TaskHandler+0x40>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    2c66:	81 e6       	ldi	r24, 0x61	; 97
    2c68:	99 e1       	ldi	r25, 0x19	; 25
    2c6a:	9d 83       	std	Y+5, r25	; 0x05
    2c6c:	8c 83       	std	Y+4, r24	; 0x04
    ind.size = size - PHY_CRC_SIZE;
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	82 50       	subi	r24, 0x02	; 2
    2c72:	8e 83       	std	Y+6, r24	; 0x06
    ind.lqi  = phyRxBuffer[size];
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	8f 59       	subi	r24, 0x9F	; 159
    2c7c:	96 4e       	sbci	r25, 0xE6	; 230
    2c7e:	fc 01       	movw	r30, r24
    2c80:	80 81       	ld	r24, Z
    2c82:	8f 83       	std	Y+7, r24	; 0x07
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    2c84:	87 e4       	ldi	r24, 0x47	; 71
    2c86:	91 e0       	ldi	r25, 0x01	; 1
    2c88:	fc 01       	movw	r30, r24
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8a 55       	subi	r24, 0x5A	; 90
    2c8e:	88 87       	std	Y+8, r24	; 0x08
    PHY_DataInd(&ind);
    2c90:	ce 01       	movw	r24, r28
    2c92:	04 96       	adiw	r24, 0x04	; 4
    2c94:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    2c98:	00 00       	nop
    2c9a:	81 e4       	ldi	r24, 0x41	; 65
    2c9c:	91 e0       	ldi	r25, 0x01	; 1
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 71       	andi	r24, 0x1F	; 31
    2ca4:	86 31       	cpi	r24, 0x16	; 22
    2ca6:	c9 f7       	brne	.-14     	; 0x2c9a <PHY_TaskHandler+0xaa>

    IRQ_STATUS_REG_s.rxEnd = 1;
    2ca8:	8f e4       	ldi	r24, 0x4F	; 79
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	fc 01       	movw	r30, r24
    2cae:	20 81       	ld	r18, Z
    2cb0:	28 60       	ori	r18, 0x08	; 8
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    2cb6:	8c e4       	ldi	r24, 0x4C	; 76
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	fc 01       	movw	r30, r24
    2cbc:	20 81       	ld	r18, Z
    2cbe:	2f 77       	andi	r18, 0x7F	; 127
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    2cc4:	8c e4       	ldi	r24, 0x4C	; 76
    2cc6:	91 e0       	ldi	r25, 0x01	; 1
    2cc8:	fc 01       	movw	r30, r24
    2cca:	20 81       	ld	r18, Z
    2ccc:	20 68       	ori	r18, 0x80	; 128
    2cce:	fc 01       	movw	r30, r24
    2cd0:	20 83       	st	Z, r18
    2cd2:	3a c0       	rjmp	.+116    	; 0x2d48 <PHY_TaskHandler+0x158>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    2cd4:	8f e4       	ldi	r24, 0x4F	; 79
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	86 fb       	bst	r24, 6
    2cde:	88 27       	eor	r24, r24
    2ce0:	80 f9       	bld	r24, 0
    2ce2:	88 23       	and	r24, r24
    2ce4:	89 f1       	breq	.+98     	; 0x2d48 <PHY_TaskHandler+0x158>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    2ce6:	81 e4       	ldi	r24, 0x41	; 65
    2ce8:	91 e0       	ldi	r25, 0x01	; 1
    2cea:	fc 01       	movw	r30, r24
    2cec:	80 81       	ld	r24, Z
    2cee:	8f 71       	andi	r24, 0x1F	; 31
    2cf0:	89 31       	cpi	r24, 0x19	; 25
    2cf2:	09 f5       	brne	.+66     	; 0x2d36 <PHY_TaskHandler+0x146>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    2cf4:	82 e4       	ldi	r24, 0x42	; 66
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	80 81       	ld	r24, Z
    2cfc:	82 95       	swap	r24
    2cfe:	86 95       	lsr	r24
    2d00:	87 70       	andi	r24, 0x07	; 7
    2d02:	8a 83       	std	Y+2, r24	; 0x02

      if (TRAC_STATUS_SUCCESS == status)
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	88 23       	and	r24, r24
    2d08:	11 f4       	brne	.+4      	; 0x2d0e <PHY_TaskHandler+0x11e>
        status = PHY_STATUS_SUCCESS;
    2d0a:	1a 82       	std	Y+2, r1	; 0x02
    2d0c:	0e c0       	rjmp	.+28     	; 0x2d2a <PHY_TaskHandler+0x13a>
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	83 30       	cpi	r24, 0x03	; 3
    2d12:	19 f4       	brne	.+6      	; 0x2d1a <PHY_TaskHandler+0x12a>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	8a 83       	std	Y+2, r24	; 0x02
    2d18:	08 c0       	rjmp	.+16     	; 0x2d2a <PHY_TaskHandler+0x13a>
      else if (TRAC_STATUS_NO_ACK == status)
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	85 30       	cpi	r24, 0x05	; 5
    2d1e:	19 f4       	brne	.+6      	; 0x2d26 <PHY_TaskHandler+0x136>
        status = PHY_STATUS_NO_ACK;
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	8a 83       	std	Y+2, r24	; 0x02
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <PHY_TaskHandler+0x13a>
      else
        status = PHY_STATUS_ERROR;
    2d26:	83 e0       	ldi	r24, 0x03	; 3
    2d28:	8a 83       	std	Y+2, r24	; 0x02

      phySetRxState();
    2d2a:	26 df       	rcall	.-436    	; 0x2b78 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <phyState>

      PHY_DataConf(status);
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	20 dd       	rcall	.-1472   	; 0x2776 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2d36:	8f e4       	ldi	r24, 0x4F	; 79
    2d38:	91 e0       	ldi	r25, 0x01	; 1
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	20 81       	ld	r18, Z
    2d3e:	20 64       	ori	r18, 0x40	; 64
    2d40:	fc 01       	movw	r30, r24
    2d42:	20 83       	st	Z, r18
    2d44:	01 c0       	rjmp	.+2      	; 0x2d48 <PHY_TaskHandler+0x158>
/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
  if (PHY_STATE_SLEEP == phyState)
    return;
    2d46:	00 00       	nop
      PHY_DataConf(status);
    }

    IRQ_STATUS_REG_s.txEnd = 1;
  }
}
    2d48:	28 96       	adiw	r28, 0x08	; 8
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
  HAL_Init();
    2d62:	0e 94 35 02 	call	0x46a	; 0x46a <HAL_Init>
  SYS_TimerInit();
    2d66:	13 d0       	rcall	.+38     	; 0x2d8e <SYS_TimerInit>
  PHY_Init();
    2d68:	03 de       	rcall	.-1018   	; 0x2970 <PHY_Init>
    2d6a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <NWK_Init>
  NWK_Init();
    2d6e:	00 00       	nop
}
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	08 95       	ret

00002d76 <SYS_TaskHandler>:
    2d76:	cf 93       	push	r28

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    2d78:	df 93       	push	r29
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
  PHY_TaskHandler();
    2d7e:	38 df       	rcall	.-400    	; 0x2bf0 <PHY_TaskHandler>
  NWK_TaskHandler();
    2d80:	0e 94 6f 05 	call	0xade	; 0xade <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2d84:	c8 d0       	rcall	.+400    	; 0x2f16 <SYS_TimerTaskHandler>
}
    2d86:	00 00       	nop
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	08 95       	ret

00002d8e <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
  timers = NULL;
    2d96:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <timers+0x1>
    2d9a:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <timers>
}
    2d9e:	00 00       	nop
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	08 95       	ret

00002da6 <SYS_TimerStart>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	1f 92       	push	r1
    2dac:	1f 92       	push	r1
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
  if (!SYS_TimerStarted(timer))
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	82 d0       	rcall	.+260    	; 0x2ec0 <SYS_TimerStarted>
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	89 27       	eor	r24, r25
    2dc2:	88 23       	and	r24, r24
    2dc4:	19 f0       	breq	.+6      	; 0x2dcc <SYS_TimerStart+0x26>
    placeTimer(timer);
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dca:	6c d1       	rcall	.+728    	; 0x30a4 <placeTimer>
}
    2dcc:	00 00       	nop
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	08 95       	ret

00002dd8 <SYS_TimerStop>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	00 d0       	rcall	.+0      	; 0x2dde <SYS_TimerStop+0x6>
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <SYS_TimerStop+0x8>
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
  SYS_Timer_t *prev = NULL;
    2de8:	1a 82       	std	Y+2, r1	; 0x02
    2dea:	19 82       	std	Y+1, r1	; 0x01

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2dec:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2df0:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
    2df8:	52 c0       	rjmp	.+164    	; 0x2e9e <SYS_TimerStop+0xc6>
  {
    if (t == timer)
    2dfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2dfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2e00:	9e 81       	ldd	r25, Y+6	; 0x06
    2e02:	28 17       	cp	r18, r24
    2e04:	39 07       	cpc	r19, r25
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <SYS_TimerStop+0x32>
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <SYS_TimerStop+0xb0>
    {
      if (prev)
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	89 2b       	or	r24, r25
    2e10:	59 f0       	breq	.+22     	; 0x2e28 <SYS_TimerStop+0x50>
        prev->next = t->next;
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	fc 01       	movw	r30, r24
    2e18:	20 81       	ld	r18, Z
    2e1a:	31 81       	ldd	r19, Z+1	; 0x01
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	fc 01       	movw	r30, r24
    2e22:	31 83       	std	Z+1, r19	; 0x01
    2e24:	20 83       	st	Z, r18
    2e26:	09 c0       	rjmp	.+18     	; 0x2e3a <SYS_TimerStop+0x62>
      else
        timers = t->next;
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    2e36:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>

      if (t->next)
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	fc 01       	movw	r30, r24
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	89 2b       	or	r24, r25
    2e46:	89 f1       	breq	.+98     	; 0x2eaa <SYS_TimerStop+0xd2>
        t->next->timeout += timer->timeout;
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	9c 81       	ldd	r25, Y+4	; 0x04
    2e56:	fc 01       	movw	r30, r24
    2e58:	80 81       	ld	r24, Z
    2e5a:	91 81       	ldd	r25, Z+1	; 0x01
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	22 81       	ldd	r18, Z+2	; 0x02
    2e60:	33 81       	ldd	r19, Z+3	; 0x03
    2e62:	44 81       	ldd	r20, Z+4	; 0x04
    2e64:	55 81       	ldd	r21, Z+5	; 0x05
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	a4 81       	ldd	r26, Z+4	; 0x04
    2e72:	b5 81       	ldd	r27, Z+5	; 0x05
    2e74:	82 0f       	add	r24, r18
    2e76:	93 1f       	adc	r25, r19
    2e78:	a4 1f       	adc	r26, r20
    2e7a:	b5 1f       	adc	r27, r21
    2e7c:	fb 01       	movw	r30, r22
    2e7e:	82 83       	std	Z+2, r24	; 0x02
    2e80:	93 83       	std	Z+3, r25	; 0x03
    2e82:	a4 83       	std	Z+4, r26	; 0x04
    2e84:	b5 83       	std	Z+5, r27	; 0x05

      break;
    2e86:	11 c0       	rjmp	.+34     	; 0x2eaa <SYS_TimerStop+0xd2>
    }
    prev = t;
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	fc 01       	movw	r30, r24
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	9c 83       	std	Y+4, r25	; 0x04
    2e9c:	8b 83       	std	Y+3, r24	; 0x03
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	89 2b       	or	r24, r25
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <SYS_TimerStop+0xd0>
    2ea6:	a9 cf       	rjmp	.-174    	; 0x2dfa <SYS_TimerStop+0x22>

      break;
    }
    prev = t;
  }
}
    2ea8:	01 c0       	rjmp	.+2      	; 0x2eac <SYS_TimerStop+0xd4>
        timers = t->next;

      if (t->next)
        t->next->timeout += timer->timeout;

      break;
    2eaa:	00 00       	nop
    }
    prev = t;
  }
}
    2eac:	00 00       	nop
    2eae:	26 96       	adiw	r28, 0x06	; 6
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	df 91       	pop	r29
    2ebc:	cf 91       	pop	r28
    2ebe:	08 95       	ret

00002ec0 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <SYS_TimerStarted+0x6>
    2ec6:	1f 92       	push	r1
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	9c 83       	std	Y+4, r25	; 0x04
    2ece:	8b 83       	std	Y+3, r24	; 0x03
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2ed0:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2ed4:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	10 c0       	rjmp	.+32     	; 0x2efe <SYS_TimerStarted+0x3e>
    if (t == timer)
    2ede:	29 81       	ldd	r18, Y+1	; 0x01
    2ee0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee6:	28 17       	cp	r18, r24
    2ee8:	39 07       	cpc	r19, r25
    2eea:	11 f4       	brne	.+4      	; 0x2ef0 <SYS_TimerStarted+0x30>
      return true;
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	0c c0       	rjmp	.+24     	; 0x2f08 <SYS_TimerStarted+0x48>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	80 81       	ld	r24, Z
    2ef8:	91 81       	ldd	r25, Z+1	; 0x01
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	9a 81       	ldd	r25, Y+2	; 0x02
    2f02:	89 2b       	or	r24, r25
    2f04:	61 f7       	brne	.-40     	; 0x2ede <SYS_TimerStarted+0x1e>
    if (t == timer)
      return true;
  return false;
    2f06:	80 e0       	ldi	r24, 0x00	; 0
}
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	08 95       	ret

00002f16 <SYS_TimerTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	28 97       	sbiw	r28, 0x08	; 8
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2f32:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    2f36:	88 23       	and	r24, r24
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <SYS_TimerTaskHandler+0x26>
    2f3a:	a6 c0       	rjmp	.+332    	; 0x3088 <SYS_TimerTaskHandler+0x172>
    return;

  ATOMIC_SECTION_ENTER
    2f3c:	8f e5       	ldi	r24, 0x5F	; 95
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	fc 01       	movw	r30, r24
    2f42:	80 81       	ld	r24, Z
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	f8 94       	cli
    cnt = halTimerIrqCount;
    2f48:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    2f4c:	8e 83       	std	Y+6, r24	; 0x06
    halTimerIrqCount = 0;
    2f4e:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    2f52:	8f e5       	ldi	r24, 0x5F	; 95
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	2d 81       	ldd	r18, Y+5	; 0x05
    2f58:	fc 01       	movw	r30, r24
    2f5a:	20 83       	st	Z, r18

  elapsed = cnt * HAL_TIMER_INTERVAL;
    2f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f5e:	88 2f       	mov	r24, r24
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	a0 e0       	ldi	r26, 0x00	; 0
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	aa 1f       	adc	r26, r26
    2f6c:	bb 1f       	adc	r27, r27
    2f6e:	9c 01       	movw	r18, r24
    2f70:	ad 01       	movw	r20, r26
    2f72:	22 0f       	add	r18, r18
    2f74:	33 1f       	adc	r19, r19
    2f76:	44 1f       	adc	r20, r20
    2f78:	55 1f       	adc	r21, r21
    2f7a:	22 0f       	add	r18, r18
    2f7c:	33 1f       	adc	r19, r19
    2f7e:	44 1f       	adc	r20, r20
    2f80:	55 1f       	adc	r21, r21
    2f82:	82 0f       	add	r24, r18
    2f84:	93 1f       	adc	r25, r19
    2f86:	a4 1f       	adc	r26, r20
    2f88:	b5 1f       	adc	r27, r21
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	9a 83       	std	Y+2, r25	; 0x02
    2f8e:	ab 83       	std	Y+3, r26	; 0x03
    2f90:	bc 83       	std	Y+4, r27	; 0x04

  while (timers && (timers->timeout <= elapsed))
    2f92:	3c c0       	rjmp	.+120    	; 0x300c <SYS_TimerTaskHandler+0xf6>
  {
    SYS_Timer_t *timer = timers;
    2f94:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2f98:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2f9c:	98 87       	std	Y+8, r25	; 0x08
    2f9e:	8f 83       	std	Y+7, r24	; 0x07

    elapsed -= timers->timeout;
    2fa0:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2fa4:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2fa8:	fc 01       	movw	r30, r24
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	a4 81       	ldd	r26, Z+4	; 0x04
    2fb0:	b5 81       	ldd	r27, Z+5	; 0x05
    2fb2:	29 81       	ldd	r18, Y+1	; 0x01
    2fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fb6:	4b 81       	ldd	r20, Y+3	; 0x03
    2fb8:	5c 81       	ldd	r21, Y+4	; 0x04
    2fba:	79 01       	movw	r14, r18
    2fbc:	8a 01       	movw	r16, r20
    2fbe:	e8 1a       	sub	r14, r24
    2fc0:	f9 0a       	sbc	r15, r25
    2fc2:	0a 0b       	sbc	r16, r26
    2fc4:	1b 0b       	sbc	r17, r27
    2fc6:	d8 01       	movw	r26, r16
    2fc8:	c7 01       	movw	r24, r14
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	9a 83       	std	Y+2, r25	; 0x02
    2fce:	ab 83       	std	Y+3, r26	; 0x03
    2fd0:	bc 83       	std	Y+4, r27	; 0x04
    timers = timers->next;
    2fd2:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    2fd6:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    2fda:	fc 01       	movw	r30, r24
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    2fe4:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fea:	98 85       	ldd	r25, Y+8	; 0x08
    2fec:	fc 01       	movw	r30, r24
    2fee:	82 85       	ldd	r24, Z+10	; 0x0a
    2ff0:	81 30       	cpi	r24, 0x01	; 1
    2ff2:	19 f4       	brne	.+6      	; 0x2ffa <SYS_TimerTaskHandler+0xe4>
      placeTimer(timer);
    2ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff6:	98 85       	ldd	r25, Y+8	; 0x08
    2ff8:	55 d0       	rcall	.+170    	; 0x30a4 <placeTimer>
    timer->handler(timer);
    2ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffc:	98 85       	ldd	r25, Y+8	; 0x08
    2ffe:	fc 01       	movw	r30, r24
    3000:	23 85       	ldd	r18, Z+11	; 0x0b
    3002:	34 85       	ldd	r19, Z+12	; 0x0c
    3004:	8f 81       	ldd	r24, Y+7	; 0x07
    3006:	98 85       	ldd	r25, Y+8	; 0x08
    3008:	f9 01       	movw	r30, r18
    300a:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    300c:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    3010:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    3014:	89 2b       	or	r24, r25
    3016:	99 f0       	breq	.+38     	; 0x303e <SYS_TimerTaskHandler+0x128>
    3018:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    301c:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    3020:	fc 01       	movw	r30, r24
    3022:	22 81       	ldd	r18, Z+2	; 0x02
    3024:	33 81       	ldd	r19, Z+3	; 0x03
    3026:	44 81       	ldd	r20, Z+4	; 0x04
    3028:	55 81       	ldd	r21, Z+5	; 0x05
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	9a 81       	ldd	r25, Y+2	; 0x02
    302e:	ab 81       	ldd	r26, Y+3	; 0x03
    3030:	bc 81       	ldd	r27, Y+4	; 0x04
    3032:	82 17       	cp	r24, r18
    3034:	93 07       	cpc	r25, r19
    3036:	a4 07       	cpc	r26, r20
    3038:	b5 07       	cpc	r27, r21
    303a:	08 f0       	brcs	.+2      	; 0x303e <SYS_TimerTaskHandler+0x128>
    303c:	ab cf       	rjmp	.-170    	; 0x2f94 <SYS_TimerTaskHandler+0x7e>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    303e:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    3042:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    3046:	89 2b       	or	r24, r25
    3048:	01 f1       	breq	.+64     	; 0x308a <SYS_TimerTaskHandler+0x174>
    timers->timeout -= elapsed;
    304a:	60 91 e4 19 	lds	r22, 0x19E4	; 0x8019e4 <timers>
    304e:	70 91 e5 19 	lds	r23, 0x19E5	; 0x8019e5 <timers+0x1>
    3052:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    3056:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    305a:	fc 01       	movw	r30, r24
    305c:	22 81       	ldd	r18, Z+2	; 0x02
    305e:	33 81       	ldd	r19, Z+3	; 0x03
    3060:	44 81       	ldd	r20, Z+4	; 0x04
    3062:	55 81       	ldd	r21, Z+5	; 0x05
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	ab 81       	ldd	r26, Y+3	; 0x03
    306a:	bc 81       	ldd	r27, Y+4	; 0x04
    306c:	79 01       	movw	r14, r18
    306e:	8a 01       	movw	r16, r20
    3070:	e8 1a       	sub	r14, r24
    3072:	f9 0a       	sbc	r15, r25
    3074:	0a 0b       	sbc	r16, r26
    3076:	1b 0b       	sbc	r17, r27
    3078:	d8 01       	movw	r26, r16
    307a:	c7 01       	movw	r24, r14
    307c:	fb 01       	movw	r30, r22
    307e:	82 83       	std	Z+2, r24	; 0x02
    3080:	93 83       	std	Z+3, r25	; 0x03
    3082:	a4 83       	std	Z+4, r26	; 0x04
    3084:	b5 83       	std	Z+5, r27	; 0x05
    3086:	01 c0       	rjmp	.+2      	; 0x308a <SYS_TimerTaskHandler+0x174>
{
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    return;
    3088:	00 00       	nop
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
}
    308a:	28 96       	adiw	r28, 0x08	; 8
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	08 95       	ret

000030a4 <placeTimer>:

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    30a4:	ef 92       	push	r14
    30a6:	ff 92       	push	r15
    30a8:	0f 93       	push	r16
    30aa:	1f 93       	push	r17
    30ac:	cf 93       	push	r28
    30ae:	df 93       	push	r29
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	2a 97       	sbiw	r28, 0x0a	; 10
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	9a 87       	std	Y+10, r25	; 0x0a
    30c2:	89 87       	std	Y+9, r24	; 0x09
  if (timers)
    30c4:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    30c8:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    30cc:	89 2b       	or	r24, r25
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <placeTimer+0x2e>
    30d0:	97 c0       	rjmp	.+302    	; 0x3200 <placeTimer+0x15c>
  {
    SYS_Timer_t *prev = NULL;
    30d2:	1a 82       	std	Y+2, r1	; 0x02
    30d4:	19 82       	std	Y+1, r1	; 0x01
    uint32_t timeout = timer->interval;
    30d6:	89 85       	ldd	r24, Y+9	; 0x09
    30d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30da:	fc 01       	movw	r30, r24
    30dc:	86 81       	ldd	r24, Z+6	; 0x06
    30de:	97 81       	ldd	r25, Z+7	; 0x07
    30e0:	a0 85       	ldd	r26, Z+8	; 0x08
    30e2:	b1 85       	ldd	r27, Z+9	; 0x09
    30e4:	8b 83       	std	Y+3, r24	; 0x03
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	ad 83       	std	Y+5, r26	; 0x05
    30ea:	be 83       	std	Y+6, r27	; 0x06

    for (SYS_Timer_t *t = timers; t; t = t->next)
    30ec:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    30f0:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    30f4:	98 87       	std	Y+8, r25	; 0x08
    30f6:	8f 83       	std	Y+7, r24	; 0x07
    30f8:	4d c0       	rjmp	.+154    	; 0x3194 <placeTimer+0xf0>
    {
      if (timeout < t->timeout)
    30fa:	8f 81       	ldd	r24, Y+7	; 0x07
    30fc:	98 85       	ldd	r25, Y+8	; 0x08
    30fe:	fc 01       	movw	r30, r24
    3100:	22 81       	ldd	r18, Z+2	; 0x02
    3102:	33 81       	ldd	r19, Z+3	; 0x03
    3104:	44 81       	ldd	r20, Z+4	; 0x04
    3106:	55 81       	ldd	r21, Z+5	; 0x05
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	ad 81       	ldd	r26, Y+5	; 0x05
    310e:	be 81       	ldd	r27, Y+6	; 0x06
    3110:	82 17       	cp	r24, r18
    3112:	93 07       	cpc	r25, r19
    3114:	a4 07       	cpc	r26, r20
    3116:	b5 07       	cpc	r27, r21
    3118:	d8 f4       	brcc	.+54     	; 0x3150 <placeTimer+0xac>
      {
         t->timeout -= timeout;
    311a:	8f 81       	ldd	r24, Y+7	; 0x07
    311c:	98 85       	ldd	r25, Y+8	; 0x08
    311e:	fc 01       	movw	r30, r24
    3120:	22 81       	ldd	r18, Z+2	; 0x02
    3122:	33 81       	ldd	r19, Z+3	; 0x03
    3124:	44 81       	ldd	r20, Z+4	; 0x04
    3126:	55 81       	ldd	r21, Z+5	; 0x05
    3128:	8b 81       	ldd	r24, Y+3	; 0x03
    312a:	9c 81       	ldd	r25, Y+4	; 0x04
    312c:	ad 81       	ldd	r26, Y+5	; 0x05
    312e:	be 81       	ldd	r27, Y+6	; 0x06
    3130:	79 01       	movw	r14, r18
    3132:	8a 01       	movw	r16, r20
    3134:	e8 1a       	sub	r14, r24
    3136:	f9 0a       	sbc	r15, r25
    3138:	0a 0b       	sbc	r16, r26
    313a:	1b 0b       	sbc	r17, r27
    313c:	d8 01       	movw	r26, r16
    313e:	c7 01       	movw	r24, r14
    3140:	2f 81       	ldd	r18, Y+7	; 0x07
    3142:	38 85       	ldd	r19, Y+8	; 0x08
    3144:	f9 01       	movw	r30, r18
    3146:	82 83       	std	Z+2, r24	; 0x02
    3148:	93 83       	std	Z+3, r25	; 0x03
    314a:	a4 83       	std	Z+4, r26	; 0x04
    314c:	b5 83       	std	Z+5, r27	; 0x05
         break;
    314e:	27 c0       	rjmp	.+78     	; 0x319e <placeTimer+0xfa>
      }
      else
        timeout -= t->timeout;
    3150:	8f 81       	ldd	r24, Y+7	; 0x07
    3152:	98 85       	ldd	r25, Y+8	; 0x08
    3154:	fc 01       	movw	r30, r24
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	a4 81       	ldd	r26, Z+4	; 0x04
    315c:	b5 81       	ldd	r27, Z+5	; 0x05
    315e:	2b 81       	ldd	r18, Y+3	; 0x03
    3160:	3c 81       	ldd	r19, Y+4	; 0x04
    3162:	4d 81       	ldd	r20, Y+5	; 0x05
    3164:	5e 81       	ldd	r21, Y+6	; 0x06
    3166:	79 01       	movw	r14, r18
    3168:	8a 01       	movw	r16, r20
    316a:	e8 1a       	sub	r14, r24
    316c:	f9 0a       	sbc	r15, r25
    316e:	0a 0b       	sbc	r16, r26
    3170:	1b 0b       	sbc	r17, r27
    3172:	d8 01       	movw	r26, r16
    3174:	c7 01       	movw	r24, r14
    3176:	8b 83       	std	Y+3, r24	; 0x03
    3178:	9c 83       	std	Y+4, r25	; 0x04
    317a:	ad 83       	std	Y+5, r26	; 0x05
    317c:	be 83       	std	Y+6, r27	; 0x06

      prev = t;
    317e:	8f 81       	ldd	r24, Y+7	; 0x07
    3180:	98 85       	ldd	r25, Y+8	; 0x08
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    3186:	8f 81       	ldd	r24, Y+7	; 0x07
    3188:	98 85       	ldd	r25, Y+8	; 0x08
    318a:	fc 01       	movw	r30, r24
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	98 87       	std	Y+8, r25	; 0x08
    3192:	8f 83       	std	Y+7, r24	; 0x07
    3194:	8f 81       	ldd	r24, Y+7	; 0x07
    3196:	98 85       	ldd	r25, Y+8	; 0x08
    3198:	89 2b       	or	r24, r25
    319a:	09 f0       	breq	.+2      	; 0x319e <placeTimer+0xfa>
    319c:	ae cf       	rjmp	.-164    	; 0x30fa <placeTimer+0x56>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    319e:	29 85       	ldd	r18, Y+9	; 0x09
    31a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	9c 81       	ldd	r25, Y+4	; 0x04
    31a6:	ad 81       	ldd	r26, Y+5	; 0x05
    31a8:	be 81       	ldd	r27, Y+6	; 0x06
    31aa:	f9 01       	movw	r30, r18
    31ac:	82 83       	std	Z+2, r24	; 0x02
    31ae:	93 83       	std	Z+3, r25	; 0x03
    31b0:	a4 83       	std	Z+4, r26	; 0x04
    31b2:	b5 83       	std	Z+5, r27	; 0x05

    if (prev)
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	89 2b       	or	r24, r25
    31ba:	91 f0       	breq	.+36     	; 0x31e0 <placeTimer+0x13c>
    {
      timer->next = prev->next;
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	fc 01       	movw	r30, r24
    31c2:	20 81       	ld	r18, Z
    31c4:	31 81       	ldd	r19, Z+1	; 0x01
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	fc 01       	movw	r30, r24
    31cc:	31 83       	std	Z+1, r19	; 0x01
    31ce:	20 83       	st	Z, r18
      prev->next = timer;
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	29 85       	ldd	r18, Y+9	; 0x09
    31d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    31d8:	fc 01       	movw	r30, r24
    31da:	31 83       	std	Z+1, r19	; 0x01
    31dc:	20 83       	st	Z, r18
  {
    timer->next = NULL;
    timer->timeout = timer->interval;
    timers = timer;
  }
}
    31de:	29 c0       	rjmp	.+82     	; 0x3232 <placeTimer+0x18e>
      timer->next = prev->next;
      prev->next = timer;
    }
    else
    {
      timer->next = timers;
    31e0:	20 91 e4 19 	lds	r18, 0x19E4	; 0x8019e4 <timers>
    31e4:	30 91 e5 19 	lds	r19, 0x19E5	; 0x8019e5 <timers+0x1>
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	fc 01       	movw	r30, r24
    31ee:	31 83       	std	Z+1, r19	; 0x01
    31f0:	20 83       	st	Z, r18
      timers = timer;
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    31fa:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
  {
    timer->next = NULL;
    timer->timeout = timer->interval;
    timers = timer;
  }
}
    31fe:	19 c0       	rjmp	.+50     	; 0x3232 <placeTimer+0x18e>
      timers = timer;
    }
  }
  else
  {
    timer->next = NULL;
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	fc 01       	movw	r30, r24
    3206:	11 82       	std	Z+1, r1	; 0x01
    3208:	10 82       	st	Z, r1
    timer->timeout = timer->interval;
    320a:	89 85       	ldd	r24, Y+9	; 0x09
    320c:	9a 85       	ldd	r25, Y+10	; 0x0a
    320e:	fc 01       	movw	r30, r24
    3210:	86 81       	ldd	r24, Z+6	; 0x06
    3212:	97 81       	ldd	r25, Z+7	; 0x07
    3214:	a0 85       	ldd	r26, Z+8	; 0x08
    3216:	b1 85       	ldd	r27, Z+9	; 0x09
    3218:	29 85       	ldd	r18, Y+9	; 0x09
    321a:	3a 85       	ldd	r19, Y+10	; 0x0a
    321c:	f9 01       	movw	r30, r18
    321e:	82 83       	std	Z+2, r24	; 0x02
    3220:	93 83       	std	Z+3, r25	; 0x03
    3222:	a4 83       	std	Z+4, r26	; 0x04
    3224:	b5 83       	std	Z+5, r27	; 0x05
    timers = timer;
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    322e:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
  }
}
    3232:	00 00       	nop
    3234:	2a 96       	adiw	r28, 0x0a	; 10
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	08 95       	ret

0000324e <__udivmodsi4>:
    324e:	a1 e2       	ldi	r26, 0x21	; 33
    3250:	1a 2e       	mov	r1, r26
    3252:	aa 1b       	sub	r26, r26
    3254:	bb 1b       	sub	r27, r27
    3256:	fd 01       	movw	r30, r26
    3258:	0d c0       	rjmp	.+26     	; 0x3274 <__udivmodsi4_ep>

0000325a <__udivmodsi4_loop>:
    325a:	aa 1f       	adc	r26, r26
    325c:	bb 1f       	adc	r27, r27
    325e:	ee 1f       	adc	r30, r30
    3260:	ff 1f       	adc	r31, r31
    3262:	a2 17       	cp	r26, r18
    3264:	b3 07       	cpc	r27, r19
    3266:	e4 07       	cpc	r30, r20
    3268:	f5 07       	cpc	r31, r21
    326a:	20 f0       	brcs	.+8      	; 0x3274 <__udivmodsi4_ep>
    326c:	a2 1b       	sub	r26, r18
    326e:	b3 0b       	sbc	r27, r19
    3270:	e4 0b       	sbc	r30, r20
    3272:	f5 0b       	sbc	r31, r21

00003274 <__udivmodsi4_ep>:
    3274:	66 1f       	adc	r22, r22
    3276:	77 1f       	adc	r23, r23
    3278:	88 1f       	adc	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	1a 94       	dec	r1
    327e:	69 f7       	brne	.-38     	; 0x325a <__udivmodsi4_loop>
    3280:	60 95       	com	r22
    3282:	70 95       	com	r23
    3284:	80 95       	com	r24
    3286:	90 95       	com	r25
    3288:	9b 01       	movw	r18, r22
    328a:	ac 01       	movw	r20, r24
    328c:	bd 01       	movw	r22, r26
    328e:	cf 01       	movw	r24, r30
    3290:	08 95       	ret

00003292 <do_rand>:
    3292:	8f 92       	push	r8
    3294:	9f 92       	push	r9
    3296:	af 92       	push	r10
    3298:	bf 92       	push	r11
    329a:	cf 92       	push	r12
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
    32a6:	ec 01       	movw	r28, r24
    32a8:	68 81       	ld	r22, Y
    32aa:	79 81       	ldd	r23, Y+1	; 0x01
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	9b 81       	ldd	r25, Y+3	; 0x03
    32b0:	61 15       	cp	r22, r1
    32b2:	71 05       	cpc	r23, r1
    32b4:	81 05       	cpc	r24, r1
    32b6:	91 05       	cpc	r25, r1
    32b8:	21 f4       	brne	.+8      	; 0x32c2 <do_rand+0x30>
    32ba:	64 e2       	ldi	r22, 0x24	; 36
    32bc:	79 ed       	ldi	r23, 0xD9	; 217
    32be:	8b e5       	ldi	r24, 0x5B	; 91
    32c0:	97 e0       	ldi	r25, 0x07	; 7
    32c2:	2d e1       	ldi	r18, 0x1D	; 29
    32c4:	33 ef       	ldi	r19, 0xF3	; 243
    32c6:	41 e0       	ldi	r20, 0x01	; 1
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	48 d0       	rcall	.+144    	; 0x335c <__divmodsi4>
    32cc:	49 01       	movw	r8, r18
    32ce:	5a 01       	movw	r10, r20
    32d0:	9b 01       	movw	r18, r22
    32d2:	ac 01       	movw	r20, r24
    32d4:	a7 ea       	ldi	r26, 0xA7	; 167
    32d6:	b1 e4       	ldi	r27, 0x41	; 65
    32d8:	5d d0       	rcall	.+186    	; 0x3394 <__muluhisi3>
    32da:	6b 01       	movw	r12, r22
    32dc:	7c 01       	movw	r14, r24
    32de:	ac ee       	ldi	r26, 0xEC	; 236
    32e0:	b4 ef       	ldi	r27, 0xF4	; 244
    32e2:	a5 01       	movw	r20, r10
    32e4:	94 01       	movw	r18, r8
    32e6:	62 d0       	rcall	.+196    	; 0x33ac <__mulohisi3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	8c 0d       	add	r24, r12
    32ee:	9d 1d       	adc	r25, r13
    32f0:	ae 1d       	adc	r26, r14
    32f2:	bf 1d       	adc	r27, r15
    32f4:	b7 ff       	sbrs	r27, 7
    32f6:	03 c0       	rjmp	.+6      	; 0x32fe <do_rand+0x6c>
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	a1 09       	sbc	r26, r1
    32fc:	b0 48       	sbci	r27, 0x80	; 128
    32fe:	88 83       	st	Y, r24
    3300:	99 83       	std	Y+1, r25	; 0x01
    3302:	aa 83       	std	Y+2, r26	; 0x02
    3304:	bb 83       	std	Y+3, r27	; 0x03
    3306:	9f 77       	andi	r25, 0x7F	; 127
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	df 90       	pop	r13
    3312:	cf 90       	pop	r12
    3314:	bf 90       	pop	r11
    3316:	af 90       	pop	r10
    3318:	9f 90       	pop	r9
    331a:	8f 90       	pop	r8
    331c:	08 95       	ret

0000331e <rand_r>:
    331e:	b9 cf       	rjmp	.-142    	; 0x3292 <do_rand>

00003320 <rand>:
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	92 e0       	ldi	r25, 0x02	; 2
    3324:	b6 cf       	rjmp	.-148    	; 0x3292 <do_rand>

00003326 <srand>:
    3326:	a0 e0       	ldi	r26, 0x00	; 0
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    332e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3332:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    3336:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    333a:	08 95       	ret

0000333c <memcpy>:
    333c:	fb 01       	movw	r30, r22
    333e:	dc 01       	movw	r26, r24
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <memcpy+0xa>
    3342:	01 90       	ld	r0, Z+
    3344:	0d 92       	st	X+, r0
    3346:	41 50       	subi	r20, 0x01	; 1
    3348:	50 40       	sbci	r21, 0x00	; 0
    334a:	d8 f7       	brcc	.-10     	; 0x3342 <memcpy+0x6>
    334c:	08 95       	ret

0000334e <memset>:
    334e:	dc 01       	movw	r26, r24
    3350:	01 c0       	rjmp	.+2      	; 0x3354 <memset+0x6>
    3352:	6d 93       	st	X+, r22
    3354:	41 50       	subi	r20, 0x01	; 1
    3356:	50 40       	sbci	r21, 0x00	; 0
    3358:	e0 f7       	brcc	.-8      	; 0x3352 <memset+0x4>
    335a:	08 95       	ret

0000335c <__divmodsi4>:
    335c:	05 2e       	mov	r0, r21
    335e:	97 fb       	bst	r25, 7
    3360:	16 f4       	brtc	.+4      	; 0x3366 <__divmodsi4+0xa>
    3362:	00 94       	com	r0
    3364:	0f d0       	rcall	.+30     	; 0x3384 <__negsi2>
    3366:	57 fd       	sbrc	r21, 7
    3368:	05 d0       	rcall	.+10     	; 0x3374 <__divmodsi4_neg2>
    336a:	71 df       	rcall	.-286    	; 0x324e <__udivmodsi4>
    336c:	07 fc       	sbrc	r0, 7
    336e:	02 d0       	rcall	.+4      	; 0x3374 <__divmodsi4_neg2>
    3370:	46 f4       	brtc	.+16     	; 0x3382 <__divmodsi4_exit>
    3372:	08 c0       	rjmp	.+16     	; 0x3384 <__negsi2>

00003374 <__divmodsi4_neg2>:
    3374:	50 95       	com	r21
    3376:	40 95       	com	r20
    3378:	30 95       	com	r19
    337a:	21 95       	neg	r18
    337c:	3f 4f       	sbci	r19, 0xFF	; 255
    337e:	4f 4f       	sbci	r20, 0xFF	; 255
    3380:	5f 4f       	sbci	r21, 0xFF	; 255

00003382 <__divmodsi4_exit>:
    3382:	08 95       	ret

00003384 <__negsi2>:
    3384:	90 95       	com	r25
    3386:	80 95       	com	r24
    3388:	70 95       	com	r23
    338a:	61 95       	neg	r22
    338c:	7f 4f       	sbci	r23, 0xFF	; 255
    338e:	8f 4f       	sbci	r24, 0xFF	; 255
    3390:	9f 4f       	sbci	r25, 0xFF	; 255
    3392:	08 95       	ret

00003394 <__muluhisi3>:
    3394:	0f d0       	rcall	.+30     	; 0x33b4 <__umulhisi3>
    3396:	a5 9f       	mul	r26, r21
    3398:	90 0d       	add	r25, r0
    339a:	b4 9f       	mul	r27, r20
    339c:	90 0d       	add	r25, r0
    339e:	a4 9f       	mul	r26, r20
    33a0:	80 0d       	add	r24, r0
    33a2:	91 1d       	adc	r25, r1
    33a4:	11 24       	eor	r1, r1
    33a6:	08 95       	ret

000033a8 <__mulshisi3>:
    33a8:	b7 ff       	sbrs	r27, 7
    33aa:	f4 cf       	rjmp	.-24     	; 0x3394 <__muluhisi3>

000033ac <__mulohisi3>:
    33ac:	f3 df       	rcall	.-26     	; 0x3394 <__muluhisi3>
    33ae:	82 1b       	sub	r24, r18
    33b0:	93 0b       	sbc	r25, r19
    33b2:	08 95       	ret

000033b4 <__umulhisi3>:
    33b4:	a2 9f       	mul	r26, r18
    33b6:	b0 01       	movw	r22, r0
    33b8:	b3 9f       	mul	r27, r19
    33ba:	c0 01       	movw	r24, r0
    33bc:	a3 9f       	mul	r26, r19
    33be:	70 0d       	add	r23, r0
    33c0:	81 1d       	adc	r24, r1
    33c2:	11 24       	eor	r1, r1
    33c4:	91 1d       	adc	r25, r1
    33c6:	b2 9f       	mul	r27, r18
    33c8:	70 0d       	add	r23, r0
    33ca:	81 1d       	adc	r24, r1
    33cc:	11 24       	eor	r1, r1
    33ce:	91 1d       	adc	r25, r1
    33d0:	08 95       	ret

000033d2 <_exit>:
    33d2:	f8 94       	cli

000033d4 <__stop_program>:
    33d4:	ff cf       	rjmp	.-2      	; 0x33d4 <__stop_program>
